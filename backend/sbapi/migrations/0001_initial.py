# Generated by Django 5.1.2 on 2024-11-29 07:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('competition_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['name'], name='sbapi_compe_name_080072_idx'), models.Index(fields=['country'], name='sbapi_compe_country_2b45dd_idx')],
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('height', models.IntegerField(null=True)),
                ('weight', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['name'], name='sbapi_playe_name_2f622a_idx')],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('season_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('is_current', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.competition')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('match_id', models.IntegerField(primary_key=True, serialize=False)),
                ('start_datetime', models.DateTimeField()),
                ('venue', models.CharField(max_length=200)),
                ('attendance', models.IntegerField(null=True)),
                ('referee_id', models.IntegerField(null=True)),
                ('referee_name', models.CharField(max_length=100, null=True)),
                ('score', models.CharField(max_length=10)),
                ('home_score_ht', models.IntegerField()),
                ('away_score_ht', models.IntegerField()),
                ('home_score_ft', models.IntegerField()),
                ('away_score_ft', models.IntegerField()),
                ('home_score_et', models.IntegerField(null=True)),
                ('away_score_et', models.IntegerField(null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.season')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'indexes': [models.Index(fields=['name'], name='sbapi_team_name_4b83cb_idx'), models.Index(fields=['country'], name='sbapi_team_country_075517_idx')],
            },
        ),
        migrations.CreateModel(
            name='SummaryEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('player_name', models.CharField(max_length=100, null=True)),
                ('minute', models.IntegerField()),
                ('second', models.FloatField()),
                ('expanded_minute', models.IntegerField()),
                ('period', models.CharField(max_length=20)),
                ('max_minute', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('end_x', models.FloatField(null=True)),
                ('end_y', models.FloatField(null=True)),
                ('defensive_third', models.BooleanField(default=False)),
                ('mid_third', models.BooleanField(default=False)),
                ('final_third', models.BooleanField(default=False)),
                ('type', models.CharField(max_length=50)),
                ('outcome_type', models.CharField(max_length=20, null=True)),
                ('related_event_id', models.FloatField(null=True)),
                ('related_player_id', models.FloatField(null=True)),
                ('h_a', models.CharField(max_length=1)),
                ('situation', models.CharField(max_length=50, null=True)),
                ('qualifiers', models.JSONField(default=list)),
                ('satisfied_events_types', models.JSONField(default=list)),
                ('card_type', models.CharField(max_length=20, null=True)),
                ('yellow_card', models.BooleanField(default=False)),
                ('red_card', models.BooleanField(default=False)),
                ('second_yellow', models.BooleanField(default=False)),
                ('void_yellow_card', models.BooleanField(default=False)),
                ('sub_on', models.BooleanField(default=False)),
                ('sub_off', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Summary Event',
                'verbose_name_plural': 'Summary Events',
                'db_table': 'sbapi_event_summary',
            },
        ),
        migrations.CreateModel(
            name='ShootingEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('player_name', models.CharField(max_length=100, null=True)),
                ('minute', models.IntegerField()),
                ('second', models.FloatField()),
                ('expanded_minute', models.IntegerField()),
                ('period', models.CharField(max_length=20)),
                ('max_minute', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('end_x', models.FloatField(null=True)),
                ('end_y', models.FloatField(null=True)),
                ('defensive_third', models.BooleanField(default=False)),
                ('mid_third', models.BooleanField(default=False)),
                ('final_third', models.BooleanField(default=False)),
                ('type', models.CharField(max_length=50)),
                ('outcome_type', models.CharField(max_length=20, null=True)),
                ('related_event_id', models.FloatField(null=True)),
                ('related_player_id', models.FloatField(null=True)),
                ('h_a', models.CharField(max_length=1)),
                ('situation', models.CharField(max_length=50, null=True)),
                ('qualifiers', models.JSONField(default=list)),
                ('satisfied_events_types', models.JSONField(default=list)),
                ('big_chance_missed', models.BooleanField(default=False)),
                ('big_chance_scored', models.BooleanField(default=False)),
                ('close_miss_high', models.BooleanField(default=False)),
                ('close_miss_high_left', models.BooleanField(default=False)),
                ('close_miss_high_right', models.BooleanField(default=False)),
                ('close_miss_left', models.BooleanField(default=False)),
                ('close_miss_right', models.BooleanField(default=False)),
                ('is_goal', models.BooleanField(default=False)),
                ('goal_counter', models.BooleanField(default=False)),
                ('goal_head', models.BooleanField(default=False)),
                ('goal_left_foot', models.BooleanField(default=False)),
                ('goal_right_foot', models.BooleanField(default=False)),
                ('goal_normal', models.BooleanField(default=False)),
                ('goal_open_play', models.BooleanField(default=False)),
                ('goal_set_piece', models.BooleanField(default=False)),
                ('goal_obox', models.BooleanField(default=False)),
                ('goal_obp', models.BooleanField(default=False)),
                ('goal_penalty_area', models.BooleanField(default=False)),
                ('goal_six_yard_box', models.BooleanField(default=False)),
                ('goal_mouth_y', models.FloatField(null=True)),
                ('goal_mouth_z', models.FloatField(null=True)),
                ('is_shot', models.BooleanField(default=False)),
                ('shot_blocked', models.BooleanField(default=False)),
                ('shot_counter', models.BooleanField(default=False)),
                ('shot_direct_corner', models.BooleanField(default=False)),
                ('shot_on_post', models.BooleanField(default=False)),
                ('shot_on_target', models.BooleanField(default=False)),
                ('shot_off_target', models.BooleanField(default=False)),
                ('shot_off_target_inside_box', models.BooleanField(default=False)),
                ('shots_total', models.BooleanField(default=False)),
                ('shot_body_type', models.CharField(max_length=20, null=True)),
                ('shot_head', models.BooleanField(default=False)),
                ('shot_left_foot', models.BooleanField(default=False)),
                ('shot_right_foot', models.BooleanField(default=False)),
                ('shot_obox_total', models.BooleanField(default=False)),
                ('shot_obp', models.BooleanField(default=False)),
                ('shot_penalty_area', models.BooleanField(default=False)),
                ('shot_six_yard_box', models.BooleanField(default=False)),
                ('shot_open_play', models.BooleanField(default=False)),
                ('shot_set_piece', models.BooleanField(default=False)),
                ('penalty_missed', models.BooleanField(default=False)),
                ('penalty_scored', models.BooleanField(default=False)),
                ('penalty_shootout_missed_off_target', models.BooleanField(default=False)),
                ('penalty_shootout_scored', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Shooting Event',
                'verbose_name_plural': 'Shooting Events',
                'db_table': 'sbapi_event_shooting',
            },
        ),
        migrations.CreateModel(
            name='PossessionEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('player_name', models.CharField(max_length=100, null=True)),
                ('minute', models.IntegerField()),
                ('second', models.FloatField()),
                ('expanded_minute', models.IntegerField()),
                ('period', models.CharField(max_length=20)),
                ('max_minute', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('end_x', models.FloatField(null=True)),
                ('end_y', models.FloatField(null=True)),
                ('defensive_third', models.BooleanField(default=False)),
                ('mid_third', models.BooleanField(default=False)),
                ('final_third', models.BooleanField(default=False)),
                ('type', models.CharField(max_length=50)),
                ('outcome_type', models.CharField(max_length=20, null=True)),
                ('related_event_id', models.FloatField(null=True)),
                ('related_player_id', models.FloatField(null=True)),
                ('h_a', models.CharField(max_length=1)),
                ('situation', models.CharField(max_length=50, null=True)),
                ('qualifiers', models.JSONField(default=list)),
                ('satisfied_events_types', models.JSONField(default=list)),
                ('corner_awarded', models.BooleanField(default=False)),
                ('dispossessed', models.BooleanField(default=False)),
                ('touches', models.BooleanField(default=False)),
                ('turnover', models.BooleanField(default=False)),
                ('overrun', models.BooleanField(default=False)),
                ('is_touch', models.BooleanField(default=False)),
                ('dribble_lastman', models.BooleanField(default=False)),
                ('dribble_lost', models.BooleanField(default=False)),
                ('dribble_won', models.BooleanField(default=False)),
                ('foul_committed', models.BooleanField(default=False)),
                ('foul_given', models.BooleanField(default=False)),
                ('penalty_won', models.BooleanField(default=False)),
                ('offside_given', models.BooleanField(default=False)),
                ('offside_provoked', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Possession Event',
                'verbose_name_plural': 'Possession Events',
                'db_table': 'sbapi_event_possession',
            },
        ),
        migrations.CreateModel(
            name='PassEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('player_name', models.CharField(max_length=100, null=True)),
                ('minute', models.IntegerField()),
                ('second', models.FloatField()),
                ('expanded_minute', models.IntegerField()),
                ('period', models.CharField(max_length=20)),
                ('max_minute', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('end_x', models.FloatField(null=True)),
                ('end_y', models.FloatField(null=True)),
                ('defensive_third', models.BooleanField(default=False)),
                ('mid_third', models.BooleanField(default=False)),
                ('final_third', models.BooleanField(default=False)),
                ('type', models.CharField(max_length=50)),
                ('outcome_type', models.CharField(max_length=20, null=True)),
                ('related_event_id', models.FloatField(null=True)),
                ('related_player_id', models.FloatField(null=True)),
                ('h_a', models.CharField(max_length=1)),
                ('situation', models.CharField(max_length=50, null=True)),
                ('qualifiers', models.JSONField(default=list)),
                ('satisfied_events_types', models.JSONField(default=list)),
                ('pass_accurate', models.BooleanField(default=False)),
                ('pass_inaccurate', models.BooleanField(default=False)),
                ('pass_accuracy', models.BooleanField(default=False)),
                ('assist', models.BooleanField(default=False)),
                ('assist_corner', models.BooleanField(default=False)),
                ('assist_cross', models.BooleanField(default=False)),
                ('assist_freekick', models.BooleanField(default=False)),
                ('assist_other', models.BooleanField(default=False)),
                ('assist_throughball', models.BooleanField(default=False)),
                ('assist_throwin', models.BooleanField(default=False)),
                ('intentional_assist', models.BooleanField(default=False)),
                ('key_pass_corner', models.BooleanField(default=False)),
                ('key_pass_cross', models.BooleanField(default=False)),
                ('key_pass_freekick', models.BooleanField(default=False)),
                ('key_pass_long', models.BooleanField(default=False)),
                ('key_pass_other', models.BooleanField(default=False)),
                ('key_pass_short', models.BooleanField(default=False)),
                ('key_pass_throughball', models.BooleanField(default=False)),
                ('key_pass_throwin', models.BooleanField(default=False)),
                ('pass_key', models.BooleanField(default=False)),
                ('pass_corner', models.BooleanField(default=False)),
                ('pass_corner_accurate', models.BooleanField(default=False)),
                ('pass_corner_inaccurate', models.BooleanField(default=False)),
                ('pass_cross_accurate', models.BooleanField(default=False)),
                ('pass_cross_blocked_defensive', models.BooleanField(default=False)),
                ('pass_cross_inaccurate', models.BooleanField(default=False)),
                ('pass_freekick', models.BooleanField(default=False)),
                ('pass_freekick_accurate', models.BooleanField(default=False)),
                ('pass_freekick_inaccurate', models.BooleanField(default=False)),
                ('pass_back', models.BooleanField(default=False)),
                ('pass_back_zone_inaccurate', models.BooleanField(default=False)),
                ('pass_forward', models.BooleanField(default=False)),
                ('pass_forward_zone_accurate', models.BooleanField(default=False)),
                ('pass_left', models.BooleanField(default=False)),
                ('pass_right', models.BooleanField(default=False)),
                ('pass_chipped', models.BooleanField(default=False)),
                ('pass_head', models.BooleanField(default=False)),
                ('pass_left_foot', models.BooleanField(default=False)),
                ('pass_right_foot', models.BooleanField(default=False)),
                ('pass_long_ball_accurate', models.BooleanField(default=False)),
                ('pass_long_ball_inaccurate', models.BooleanField(default=False)),
                ('short_pass_accurate', models.BooleanField(default=False)),
                ('short_pass_inaccurate', models.BooleanField(default=False)),
                ('pass_through_ball_accurate', models.BooleanField(default=False)),
                ('pass_through_ball_inaccurate', models.BooleanField(default=False)),
                ('big_chance_created', models.BooleanField(default=False)),
                ('successful_final_third_passes', models.BooleanField(default=False)),
                ('throw_in', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Passing Event',
                'verbose_name_plural': 'Passing Events',
                'db_table': 'sbapi_event_passing',
            },
        ),
        migrations.CreateModel(
            name='MatchTeamStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_home', models.BooleanField()),
                ('field', models.CharField(max_length=10)),
                ('average_age', models.FloatField()),
                ('manager_name', models.CharField(max_length=100)),
                ('country_name', models.CharField(max_length=100)),
                ('running_score', models.IntegerField()),
                ('stats', models.JSONField(default=dict, help_text='\n    Stores team statistics by minute including:\n    - minutesWithStats\n    - ratings\n    - shots metrics\n    - possession metrics\n    - passing metrics\n    - aerial metrics\n    - corners metrics\n    - throw-ins metrics\n    And other match statistics\n    ')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Match team statistic',
                'verbose_name_plural': 'Match team statistics',
            },
        ),
        migrations.CreateModel(
            name='MatchPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shirt_no', models.IntegerField()),
                ('position', models.CharField(max_length=20)),
                ('field', models.CharField(max_length=10)),
                ('is_first_eleven', models.BooleanField()),
                ('is_man_of_match', models.BooleanField()),
                ('age', models.IntegerField()),
                ('height', models.IntegerField()),
                ('weight', models.IntegerField()),
                ('stats', models.JSONField(default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='away_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='sbapi.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='home_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='sbapi.team'),
        ),
        migrations.CreateModel(
            name='GoalkeeperEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('player_name', models.CharField(max_length=100, null=True)),
                ('minute', models.IntegerField()),
                ('second', models.FloatField()),
                ('expanded_minute', models.IntegerField()),
                ('period', models.CharField(max_length=20)),
                ('max_minute', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('end_x', models.FloatField(null=True)),
                ('end_y', models.FloatField(null=True)),
                ('defensive_third', models.BooleanField(default=False)),
                ('mid_third', models.BooleanField(default=False)),
                ('final_third', models.BooleanField(default=False)),
                ('type', models.CharField(max_length=50)),
                ('outcome_type', models.CharField(max_length=20, null=True)),
                ('related_event_id', models.FloatField(null=True)),
                ('related_player_id', models.FloatField(null=True)),
                ('h_a', models.CharField(max_length=1)),
                ('situation', models.CharField(max_length=50, null=True)),
                ('qualifiers', models.JSONField(default=list)),
                ('satisfied_events_types', models.JSONField(default=list)),
                ('is_collected', models.BooleanField(default=False)),
                ('keeper_claim_high_lost', models.BooleanField(default=False)),
                ('keeper_claim_high_won', models.BooleanField(default=False)),
                ('keeper_claim_lost', models.BooleanField(default=False)),
                ('keeper_claim_won', models.BooleanField(default=False)),
                ('keeper_diving_save', models.BooleanField(default=False)),
                ('keeper_missed', models.BooleanField(default=False)),
                ('keeper_one_to_one_won', models.BooleanField(default=False)),
                ('standing_save', models.BooleanField(default=False)),
                ('save_feet', models.BooleanField(default=False)),
                ('save_hands', models.BooleanField(default=False)),
                ('save_high_centre', models.BooleanField(default=False)),
                ('save_high_left', models.BooleanField(default=False)),
                ('save_high_right', models.BooleanField(default=False)),
                ('save_low_centre', models.BooleanField(default=False)),
                ('save_low_left', models.BooleanField(default=False)),
                ('save_low_right', models.BooleanField(default=False)),
                ('save_obox', models.BooleanField(default=False)),
                ('save_obp', models.BooleanField(default=False)),
                ('save_penalty_area', models.BooleanField(default=False)),
                ('save_six_yard_box', models.BooleanField(default=False)),
                ('keeper_save_in_the_box', models.BooleanField(default=False)),
                ('keeper_save_total', models.BooleanField(default=False)),
                ('keeper_penalty_saved', models.BooleanField(default=False)),
                ('penalty_shootout_saved', models.BooleanField(default=False)),
                ('penalty_shootout_saved_gk', models.BooleanField(default=False)),
                ('penalty_shootout_conceded_gk', models.BooleanField(default=False)),
                ('keeper_smother', models.BooleanField(default=False)),
                ('keeper_sweeper_lost', models.BooleanField(default=False)),
                ('parried_danger', models.BooleanField(default=False)),
                ('parried_safe', models.BooleanField(default=False)),
                ('punches', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Goalkeeper Event',
                'verbose_name_plural': 'Goalkeeper Events',
                'db_table': 'sbapi_event_goalkeeping',
            },
        ),
        migrations.CreateModel(
            name='DefendingEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('event_id', models.IntegerField()),
                ('player_name', models.CharField(max_length=100, null=True)),
                ('minute', models.IntegerField()),
                ('second', models.FloatField()),
                ('expanded_minute', models.IntegerField()),
                ('period', models.CharField(max_length=20)),
                ('max_minute', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('end_x', models.FloatField(null=True)),
                ('end_y', models.FloatField(null=True)),
                ('defensive_third', models.BooleanField(default=False)),
                ('mid_third', models.BooleanField(default=False)),
                ('final_third', models.BooleanField(default=False)),
                ('type', models.CharField(max_length=50)),
                ('outcome_type', models.CharField(max_length=20, null=True)),
                ('related_event_id', models.FloatField(null=True)),
                ('related_player_id', models.FloatField(null=True)),
                ('h_a', models.CharField(max_length=1)),
                ('situation', models.CharField(max_length=50, null=True)),
                ('qualifiers', models.JSONField(default=list)),
                ('satisfied_events_types', models.JSONField(default=list)),
                ('is_tackle', models.BooleanField(default=False)),
                ('is_interception', models.BooleanField(default=False)),
                ('is_clearance', models.BooleanField(default=False)),
                ('is_ball_recovery', models.BooleanField(default=False)),
                ('aerial_success', models.BooleanField(default=False)),
                ('duel_aerial_lost', models.BooleanField(default=False)),
                ('duel_aerial_won', models.BooleanField(default=False)),
                ('blocked_x', models.FloatField(null=True)),
                ('blocked_y', models.FloatField(null=True)),
                ('clearance_effective', models.BooleanField(default=False)),
                ('clearance_head', models.BooleanField(default=False)),
                ('clearance_off_the_line', models.BooleanField(default=False)),
                ('clearance_total', models.BooleanField(default=False)),
                ('challenge_lost', models.BooleanField(default=False)),
                ('defensive_duel', models.BooleanField(default=False)),
                ('offensive_duel', models.BooleanField(default=False)),
                ('error_leads_to_goal', models.BooleanField(default=False)),
                ('error_leads_to_shot', models.BooleanField(default=False)),
                ('goal_own', models.BooleanField(default=False)),
                ('interception_all', models.BooleanField(default=False)),
                ('interception_in_the_box', models.BooleanField(default=False)),
                ('interception_won', models.BooleanField(default=False)),
                ('outfielder_block', models.BooleanField(default=False)),
                ('outfielder_blocked_pass', models.BooleanField(default=False)),
                ('six_yard_block', models.BooleanField(default=False)),
                ('tackle_last_man', models.BooleanField(default=False)),
                ('tackle_lost', models.BooleanField(default=False)),
                ('tackle_won', models.BooleanField(default=False)),
                ('penalty_conceded', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.match')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sbapi.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.team')),
            ],
            options={
                'verbose_name': 'Defending Event',
                'verbose_name_plural': 'Defending Events',
                'db_table': 'sbapi_event_defending',
            },
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formation_id', models.IntegerField()),
                ('formation_name', models.CharField(max_length=10)),
                ('captain_player_id', models.IntegerField()),
                ('period', models.IntegerField()),
                ('start_minute_expanded', models.IntegerField()),
                ('end_minute_expanded', models.IntegerField()),
                ('jersey_numbers', models.JSONField(default=list)),
                ('player_ids', models.JSONField(default=list)),
                ('formation_slots', models.JSONField(default=list)),
                ('formation_positions', models.JSONField(default=list)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('match_team_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sbapi.matchteamstats')),
            ],
            options={
                'indexes': [models.Index(fields=['formation_name'], name='sbapi_forma_formati_ab138a_idx'), models.Index(fields=['captain_player_id'], name='sbapi_forma_captain_756fc3_idx')],
                'unique_together': {('match_team_stats', 'formation_id', 'period')},
            },
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['is_current'], name='sbapi_seaso_is_curr_bc5403_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='season',
            unique_together={('competition', 'name')},
        ),
        migrations.AddIndex(
            model_name='summaryevent',
            index=models.Index(fields=['match', 'minute'], name='sbapi_event_match_i_787265_idx'),
        ),
        migrations.AddIndex(
            model_name='summaryevent',
            index=models.Index(fields=['player', 'type'], name='sbapi_event_player__b52555_idx'),
        ),
        migrations.AddIndex(
            model_name='summaryevent',
            index=models.Index(fields=['team', 'type'], name='sbapi_event_team_id_ef028a_idx'),
        ),
        migrations.AddIndex(
            model_name='summaryevent',
            index=models.Index(fields=['event_id'], name='sbapi_event_event_i_376715_idx'),
        ),
        migrations.AddIndex(
            model_name='summaryevent',
            index=models.Index(fields=['card_type'], name='sbapi_event_card_ty_01bd0b_idx'),
        ),
        migrations.AddIndex(
            model_name='summaryevent',
            index=models.Index(fields=['sub_on', 'sub_off'], name='sbapi_event_sub_on_919522_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['match', 'minute'], name='sbapi_event_match_i_600bbe_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['player', 'type'], name='sbapi_event_player__4d3a71_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['team', 'type'], name='sbapi_event_team_id_3a6f6a_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['event_id'], name='sbapi_event_event_i_678115_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['is_goal'], name='sbapi_event_is_goal_c0daab_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['is_shot'], name='sbapi_event_is_shot_d8c23b_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['shot_on_target'], name='sbapi_event_shot_on_496be4_idx'),
        ),
        migrations.AddIndex(
            model_name='shootingevent',
            index=models.Index(fields=['big_chance_scored'], name='sbapi_event_big_cha_d3b014_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['match', 'minute'], name='sbapi_event_match_i_0de657_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['player', 'type'], name='sbapi_event_player__08d47c_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['team', 'type'], name='sbapi_event_team_id_082591_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['event_id'], name='sbapi_event_event_i_0506ad_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['dribble_won'], name='sbapi_event_dribble_336758_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['dispossessed'], name='sbapi_event_disposs_3e2477_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['foul_committed'], name='sbapi_event_foul_co_25c843_idx'),
        ),
        migrations.AddIndex(
            model_name='possessionevent',
            index=models.Index(fields=['touches'], name='sbapi_event_touches_689c94_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['match', 'minute'], name='sbapi_event_match_i_aefb3b_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['player', 'type'], name='sbapi_event_player__6abd5a_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['team', 'type'], name='sbapi_event_team_id_054a1e_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['event_id'], name='sbapi_event_event_i_14931d_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['pass_accurate'], name='sbapi_event_pass_ac_ba36de_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['assist'], name='sbapi_event_assist_d8fa64_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['pass_key'], name='sbapi_event_pass_ke_26ed2a_idx'),
        ),
        migrations.AddIndex(
            model_name='passevent',
            index=models.Index(fields=['big_chance_created'], name='sbapi_event_big_cha_ff1221_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchteamstats',
            unique_together={('match', 'team')},
        ),
        migrations.AddIndex(
            model_name='matchplayer',
            index=models.Index(fields=['position'], name='sbapi_match_positio_d56e17_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchplayer',
            unique_together={('match', 'player', 'team')},
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['start_datetime'], name='sbapi_match_start_d_b479c2_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['home_team'], name='sbapi_match_home_te_17af12_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['away_team'], name='sbapi_match_away_te_c1e3d5_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['referee_id'], name='sbapi_match_referee_20666a_idx'),
        ),
        migrations.AddIndex(
            model_name='match',
            index=models.Index(fields=['competition'], name='sbapi_match_competi_0d17da_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['match', 'minute'], name='sbapi_event_match_i_13e256_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['player', 'type'], name='sbapi_event_player__c1b44b_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['team', 'type'], name='sbapi_event_team_id_08b887_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['event_id'], name='sbapi_event_event_i_dcaa0e_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['keeper_diving_save'], name='sbapi_event_keeper__21d8d4_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['keeper_save_total'], name='sbapi_event_keeper__a677af_idx'),
        ),
        migrations.AddIndex(
            model_name='goalkeeperevent',
            index=models.Index(fields=['keeper_penalty_saved'], name='sbapi_event_keeper__16ced3_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['match', 'minute'], name='sbapi_event_match_i_6313f6_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['player', 'type'], name='sbapi_event_player__083cd7_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['team', 'type'], name='sbapi_event_team_id_27df09_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['event_id'], name='sbapi_event_event_i_e9ff91_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['is_tackle'], name='sbapi_event_is_tack_00e724_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['is_interception'], name='sbapi_event_is_inte_428499_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['is_clearance'], name='sbapi_event_is_clea_e456d8_idx'),
        ),
        migrations.AddIndex(
            model_name='defendingevent',
            index=models.Index(fields=['aerial_success'], name='sbapi_event_aerial__dc1179_idx'),
        ),
    ]
