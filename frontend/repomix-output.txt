This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-10T22:34:00.437Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    common/
      BaseLayout.js
      ErrorMessage1.js
      index.js
      LoadingSpinner1.js
      Modal.js
      Navbar.js
    competition/
      CompetitionOverview.js
    homepage/
      Home.js
    match/
      MatchDetails.js
      MatchHeader.js
      MatchLineups.js
      TeamLineup.js
      TeamLineupTable.js
    pitch/
      BasePitch.js
      constants.js
      GoalPost.js
      HalfVerticalPitch.js
      HeatSoccerPitch.js
      index.js
      SoccerPitch.js
      VerticalSoccerPitch.js
    player/
      features/
        defending/
          DefendingItemDetails.js
        passing/
          PassingItemDetails.js
        shooting/
          ShootingItemDetails.js
        summary/
          SummaryItemDetails.js
      PlayerMatchPerformance/
        components/
          statoverview/
            ShootingStatsOverview.js
            StatCard.js
            SummaryStatsOverview.js
          ItemDetails.js
          PlayerProfile.js
          StatNavigation.js
          StatOverview.js
          SubStatNavigation.js
          Visualization.js
        config/
          statConfig.js
          statTypes.js
        hooks/
          useStatData.js
        visualizations/
          index.js
          PlayerMatchShots.js
          PlayerMatchTouches.js
        PlayerMatchPerformance.js
  services/
    api.js
  App.js
  App.test.js
  index.css
  index.js
  logo.svg
  reportWebVitals.js
  setupTests.js
.gitignore
.prettierrc
package.json
README.md
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: public/index.html
================
<!doctype html>
<html lang="en" data-theme="dark">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/components/common/BaseLayout.js
================
// src/components/common/BaseLayout.js
import React from 'react';
import Navbar from './Navbar';

const BaseLayout = ({ children, className = '' }) => {
  return (
    <div className='min-h-screen bg-gray-100'>
      <Navbar />
      <main
        className={`container mx-auto min-h-[calc(100vh-4rem)] px-4 py-6 sm:px-6 lg:px-8 ${className}`}
      >
        {children}
      </main>
      <footer className='mt-auto border-t border-gray-200 bg-white py-4 dark:border-gray-800 dark:bg-gray-800'>
        <div className='container mx-auto px-4 text-center text-sm text-gray-600 dark:text-gray-400'>
          Â© {new Date().getFullYear()} Statsball. All rights reserved.
        </div>
      </footer>
    </div>
  );
};

export default BaseLayout;

================
File: src/components/common/ErrorMessage1.js
================
// ErrorMessage.js
import React from 'react';

const ErrorMessage = ({ message }) => {
  if (!message) return null;

  return (
    <div
      className='mb-6 rounded-lg border border-red-400 bg-red-100 px-4 py-3 text-center text-red-700'
      role='alert'
    >
      {message}
    </div>
  );
};

export default ErrorMessage;

================
File: src/components/common/index.js
================
// src/components/common/index.js
import React from 'react';
import { AlertCircle, Loader2 } from 'lucide-react';

export const ErrorMessage = ({
  message,
  variant = 'error',
  action,
  className = '',
}) => {
  const styles = {
    error: 'bg-red-50 text-red-700 border-red-200',
    warning: 'bg-yellow-50 text-yellow-700 border-yellow-200',
    info: 'bg-blue-50 text-blue-700 border-blue-200',
  };

  return (
    <div className={`rounded-lg border p-4 ${styles[variant]} ${className}`}>
      <div className='flex items-center gap-3'>
        <AlertCircle className='h-5 w-5' />
        <div className='flex-1'>{message}</div>
        {action && (
          <button
            onClick={action.onClick}
            className='rounded bg-white px-3 py-1 text-sm font-medium shadow-sm hover:bg-gray-50'
          >
            {action.label}
          </button>
        )}
      </div>
    </div>
  );
};

export const LoadingSpinner = ({
  fullScreen = false,
  message = 'Loading...',
  className = '',
}) => {
  const containerStyles = fullScreen
    ? 'fixed inset-0 bg-white/80 backdrop-blur-sm'
    : 'w-full';

  return (
    <div
      className={`flex items-center justify-center p-8 ${containerStyles} ${className}`}
    >
      <div className='flex flex-col items-center gap-2'>
        <Loader2 className='h-8 w-8 animate-spin text-blue-500' />
        <p className='text-sm text-gray-500'>{message}</p>
      </div>
    </div>
  );
};

export const EmptyState = ({
  title,
  message,
  icon: Icon,
  action,
  className = '',
}) => (
  <div
    className={`flex flex-col items-center justify-center rounded-lg border border-dashed border-gray-300 bg-white p-8 ${className}`}
  >
    {Icon && <Icon className='mb-3 h-12 w-12 text-gray-400' />}
    <h3 className='mb-1 text-lg font-medium'>{title}</h3>
    <p className='mb-4 text-sm text-gray-500'>{message}</p>
    {action && (
      <button
        onClick={action.onClick}
        className='rounded-full bg-blue-500 px-4 py-2 text-sm font-medium text-white hover:bg-blue-600'
      >
        {action.label}
      </button>
    )}
  </div>
);

================
File: src/components/common/LoadingSpinner1.js
================
import React from 'react';

const LoadingSpinner = ({ fullScreen = false }) => {
  const baseClasses = 'flex items-center justify-center';
  const containerClasses = fullScreen ? `${baseClasses} h-screen` : baseClasses;

  return (
    <div className={containerClasses} role='status'>
      <div
        className='h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent'
        aria-label='Loading'
      />
      <span className='sr-only'>Loading...</span>
    </div>
  );
};

export default LoadingSpinner;

================
File: src/components/common/Modal.js
================
// Modal.js
import React, { useRef, useEffect } from 'react';

const Modal = ({ isOpen, onClose, title, children, footer }) => {
  const modalRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = event => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        onClose();
      }
    };

    const handleEscapeKey = event => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      document.addEventListener('keydown', handleEscapeKey);
      // Prevent scroll when modal is open
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleEscapeKey);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div
      className='fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50'
      role='dialog'
      aria-modal='true'
      aria-labelledby='modal-title'
    >
      <div
        ref={modalRef}
        className='w-full max-w-lg overflow-hidden rounded-lg bg-white shadow-lg'
      >
        <div className='flex items-center justify-between border-b p-4'>
          <h2 id='modal-title' className='text-xl font-semibold'>
            {title}
          </h2>
          <button
            className='rounded-full p-1 text-gray-500 hover:bg-gray-100 hover:text-gray-700'
            onClick={onClose}
            aria-label='Close modal'
          >
            Ã
          </button>
        </div>
        <div className='p-6'>{children}</div>
        {footer && <div className='border-t p-4 text-right'>{footer}</div>}
      </div>
    </div>
  );
};

export default Modal;

================
File: src/components/common/Navbar.js
================
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Home, Menu, Trophy, Activity, X } from 'lucide-react';

const navigation = [
  { name: 'Home', href: '/', icon: Home },
  { name: 'Competitions', href: '/competitions', icon: Trophy },
  { name: 'Match Center', href: '/matches', icon: Activity },
];

const Navbar = () => {
  const [isOpen, setIsOpen] = useState(false);
  const location = useLocation();

  const isActive = path => location.pathname === path;

  return (
    <header>
      <nav className='bg-blue-600 shadow-lg' aria-label='Main navigation'>
        <div className='mx-auto max-w-7xl px-4 sm:px-6 lg:px-8'>
          <div className='flex h-16 justify-between'>
            <div className='flex'>
              <div className='flex flex-shrink-0 items-center'>
                <Link to='/' className='flex items-center space-x-2'>
                  <img
                    src='/api/placeholder/32/32'
                    alt='Logo'
                    className='h-8 w-8 rounded-full'
                  />
                  <span className='hidden text-xl font-bold text-white sm:block'>
                    Statsball
                  </span>
                </Link>
              </div>

              <div className='hidden sm:ml-6 sm:flex sm:space-x-8'>
                {navigation.map(item => (
                  <Link
                    key={item.name}
                    to={item.href}
                    className={`inline-flex items-center space-x-2 border-b-2 px-1 pt-1 text-sm font-medium ${
                      isActive(item.href)
                        ? 'border-white text-white'
                        : 'border-transparent text-blue-100 hover:border-blue-200 hover:text-white'
                    }`}
                  >
                    <item.icon className='h-4 w-4' />
                    <span>{item.name}</span>
                  </Link>
                ))}
              </div>
            </div>

            <div className='flex items-center sm:hidden'>
              <button
                onClick={() => setIsOpen(!isOpen)}
                className='inline-flex items-center justify-center rounded-md p-2 text-blue-100 hover:bg-blue-700 hover:text-white'
              >
                {isOpen ? (
                  <X className='h-6 w-6' aria-hidden='true' />
                ) : (
                  <Menu className='h-6 w-6' aria-hidden='true' />
                )}
              </button>
            </div>
          </div>
        </div>

        {isOpen && (
          <div className='sm:hidden'>
            <div className='space-y-1 pb-3 pt-2'>
              {navigation.map(item => (
                <Link
                  key={item.name}
                  to={item.href}
                  className={`flex items-center space-x-2 border-l-4 py-2 pl-3 pr-4 text-base font-medium ${
                    isActive(item.href)
                      ? 'border-white bg-blue-700 text-white'
                      : 'border-transparent text-blue-100 hover:border-blue-300 hover:bg-blue-700 hover:text-white'
                  }`}
                  onClick={() => setIsOpen(false)}
                >
                  <item.icon className='h-5 w-5' />
                  <span>{item.name}</span>
                </Link>
              ))}
            </div>
          </div>
        )}
      </nav>
    </header>
  );
};

export default Navbar;

================
File: src/components/competition/CompetitionOverview.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { LoadingSpinner, ErrorMessage, EmptyState } from '../common';
import { Calendar } from 'lucide-react';
import { format } from 'date-fns';
import * as api from '../../services/api';

const CompetitionOverview = () => {
  const { competitionId, seasonId } = useParams();
  const [allMatches, setAllMatches] = useState([]);
  const [displayedMatches, setDisplayedMatches] = useState([]);
  const [teams, setTeams] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [leagueInfo, setLeagueInfo] = useState(null);
  const navigate = useNavigate();

  const [showAllMatches, setShowAllMatches] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [matchesPerPage] = useState(10);

  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const leagueData = await api.getCompetitionInfo(competitionId, seasonId);
      setLeagueInfo(leagueData);

      await new Promise(resolve => setTimeout(resolve, 500));

      const matchesData = await api.getCompetitionMatches(
        competitionId,
        seasonId,
      );
      const sortedMatches = matchesData
        .filter(match => match?.match_date)
        .sort((a, b) => new Date(b.match_date) - new Date(a.match_date));

      setAllMatches(sortedMatches);
      setDisplayedMatches(sortedMatches.slice(0, 5));

      const uniqueTeams = Array.from(
        new Set(
          matchesData
            .filter(match => match?.home_team && match?.away_team)
            .flatMap(match => [match.home_team, match.away_team]),
        ),
      ).sort();

      setTeams(uniqueTeams);
    } catch (err) {
      console.error('Error loading data:', err);
      setError('Failed to load data. Please try again later.');
    } finally {
      setLoading(false);
    }
  }, [competitionId, seasonId]);

  useEffect(() => {
    if (competitionId && seasonId) {
      const timer = setTimeout(loadData, 100);
      return () => clearTimeout(timer);
    }
  }, [competitionId, seasonId, loadData]);

  const indexOfLastMatch = currentPage * matchesPerPage;
  const indexOfFirstMatch = indexOfLastMatch - matchesPerPage;
  const totalPages = Math.ceil(allMatches.length / matchesPerPage);

  useEffect(() => {
    if (showAllMatches) {
      setDisplayedMatches(
        allMatches.slice(indexOfFirstMatch, indexOfLastMatch),
      );
    } else {
      setDisplayedMatches(allMatches.slice(0, 5));
    }
  }, [
    showAllMatches,
    currentPage,
    allMatches,
    indexOfFirstMatch,
    indexOfLastMatch,
  ]);

  const handlePageChange = pageNumber => {
    setCurrentPage(pageNumber);
  };

  const toggleMatchesView = () => {
    setShowAllMatches(!showAllMatches);
    setCurrentPage(1);
  };

  if (loading) {
    return <LoadingSpinner message='Loading competition data...' />;
  }

  if (error) {
    return (
      <ErrorMessage
        message={error}
        action={{
          label: 'Try Again',
          onClick: loadData,
        }}
      />
    );
  }

  if (!allMatches.length) {
    return (
      <EmptyState
        icon={Calendar}
        title='No Matches Found'
        message='There are no matches available for this competition yet.'
      />
    );
  }

  return (
    <div className='container mx-auto py-6'>
      <div className='mb-6 rounded bg-blue-600 p-4 text-white'>
        <h2 className='text-2xl font-bold'>
          {leagueInfo?.competition || 'League'}
        </h2>
        <p className='opacity-80'>{leagueInfo?.season || 'Season'}</p>
      </div>

      <div className='mb-6 rounded bg-white shadow'>
        <div className='flex items-center justify-between rounded-t bg-gray-100 p-4'>
          <h4 className='text-xl font-semibold'>
            {showAllMatches ? 'All Matches' : 'Recent Matches'}
          </h4>
          <button
            className='rounded border border-blue-500 px-3 py-1 text-blue-500 hover:bg-blue-500 hover:text-white'
            onClick={toggleMatchesView}
          >
            {showAllMatches ? 'Show Recent Matches' : 'View All Matches'}
          </button>
        </div>
        <div className='overflow-x-auto'>
          <table className='min-w-full divide-y divide-gray-200'>
            <thead className='bg-gray-50'>
              <tr>
                <th className='px-6 py-3 text-left text-xs font-medium uppercase text-gray-500'>
                  Date
                </th>
                <th className='px-6 py-3 text-left text-xs font-medium uppercase text-gray-500'>
                  Home Team
                </th>
                <th className='px-6 py-3 text-center text-xs font-medium uppercase text-gray-500'>
                  Score
                </th>
                <th className='px-6 py-3 text-left text-xs font-medium uppercase text-gray-500'>
                  Away Team
                </th>
                <th className='px-6 py-3 text-left text-xs font-medium uppercase text-gray-500'>
                  Week
                </th>
                <th className='px-6 py-3 text-left text-xs font-medium uppercase text-gray-500'>
                  Status
                </th>
              </tr>
            </thead>
            <tbody className='divide-y divide-gray-200 bg-white'>
              {displayedMatches.map(match => (
                <tr
                  key={match.match_id}
                  className='cursor-pointer hover:bg-gray-100'
                  onClick={() =>
                    navigate(
                      `/match/${competitionId}/${seasonId}/${match.match_id}`,
                      {
                        state: {
                          matchData: match,
                          competitionId,
                          seasonId,
                        },
                      },
                    )
                  }
                >
                  <td className='px-6 py-4'>
                    {format(new Date(match.match_date), 'MMM d, yyyy')}
                    <br />
                    <span className='text-xs text-gray-500'>
                      {match.kick_off}
                    </span>
                  </td>
                  <td className='px-6 py-4'>{match.home_team}</td>
                  <td className='px-6 py-4 text-center font-semibold'>
                    {match.home_score} - {match.away_score}
                  </td>
                  <td className='px-6 py-4'>{match.away_team}</td>
                  <td className='px-6 py-4'>
                    Week {match.match_week || 'N/A'}
                  </td>
                  <td className='px-6 py-4'>
                    <span
                      className={`rounded px-2 py-1 ${
                        match.match_status === 'available'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      {match.match_status}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {showAllMatches && totalPages > 1 && (
          <div className='flex justify-center p-4'>
            <div className='flex gap-2'>
              {[...Array(totalPages)].map((_, index) => (
                <button
                  key={index + 1}
                  onClick={() => handlePageChange(index + 1)}
                  className={`rounded px-3 py-1 ${
                    currentPage === index + 1
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-200 hover:bg-gray-300'
                  }`}
                >
                  {index + 1}
                </button>
              ))}
            </div>
          </div>
        )}
      </div>

      <div className='rounded bg-white shadow'>
        <div className='rounded-t bg-gray-100 p-4'>
          <h4 className='text-xl font-semibold'>Teams</h4>
        </div>
        <div className='grid gap-4 p-4 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5'>
          {teams.map(team => (
            <div
              key={team}
              className='cursor-pointer rounded-lg bg-white p-4 text-center shadow hover:bg-gray-100'
              onClick={() => console.log('Team clicked:', team)}
            >
              <img
                src='/api/placeholder/50/50'
                alt={`${team} logo`}
                className='mx-auto mb-2 h-12 w-12'
              />
              <h6 className='text-sm font-medium'>{team}</h6>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CompetitionOverview;

================
File: src/components/homepage/Home.js
================
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { LoadingSpinner, ErrorMessage } from '../common';
import * as api from '../../services/api';

const Home = () => {
  const [leagues, setLeagues] = useState([]);
  const [selectedLeague, setSelectedLeague] = useState(null);
  const [seasons, setSeasons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const modalRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchLeagues = async () => {
      try {
        const competitionsData = await api.getCompetitions();
        const uniqueLeagues = Object.values(
          competitionsData.reduce((acc, comp) => {
            if (
              !acc[comp.competition_id] ||
              new Date(comp.season_name) >
                new Date(acc[comp.competition_id].season_name)
            ) {
              acc[comp.competition_id] = {
                id: comp.competition_id,
                name: comp.competition_name,
                country: comp.country_name,
                gender: comp.competition_gender,
                international: comp.competition_international,
                logoUrl: `/api/placeholder/100/100`,
              };
            }
            return acc;
          }, {}),
        ).sort((a, b) => a.name.localeCompare(b.name));

        setLeagues(uniqueLeagues);
        setError(null);
      } catch (err) {
        setError('Failed to load leagues');
      } finally {
        setLoading(false);
      }
    };

    fetchLeagues();
  }, []);

  useEffect(() => {
    const handleClickOutside = event => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        setShowModal(false);
      }
    };

    if (showModal) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showModal]);

  const handleLeagueClick = async league => {
    try {
      const seasonsData = await api.getSeasons(league.id);
      const sortedSeasons = seasonsData.sort(
        (a, b) => new Date(b.season_name) - new Date(a.season_name),
      );
      setSeasons(sortedSeasons);
      setSelectedLeague(league);
      setShowModal(true);
      setError(null);
    } catch (err) {
      setError('Failed to load seasons for this league');
    }
  };

  if (loading) {
    return <LoadingSpinner message='Loading leagues...' />;
  }

  if (error) {
    return (
      <ErrorMessage
        message={error}
        action={{
          label: 'Try Again',
          onClick: () => window.location.reload(),
        }}
      />
    );
  }

  return (
    <div className='container mx-auto bg-gray-100 py-8'>
      <h1 className='mb-6 text-center text-3xl font-semibold'>
        Select a League
      </h1>

      {error && (
        <div className='mb-6 rounded border border-red-400 bg-red-100 px-4 py-3 text-center text-red-700'>
          {error}
        </div>
      )}

      <div className='grid gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'>
        {leagues.map(league => (
          <div
            key={league.id}
            className='transform cursor-pointer rounded-lg bg-white p-6 text-center shadow-lg transition-transform hover:scale-105'
            onClick={() => handleLeagueClick(league)}
          >
            <img
              src={league.logoUrl}
              alt={`${league.name} logo`}
              className='mx-auto mb-4 h-24 w-24 object-contain'
            />
            <h3 className='text-xl font-semibold'>{league.name}</h3>
            <p className='text-gray-500'>
              {league.country} {league.international && 'â¢ International'}
            </p>
          </div>
        ))}
      </div>

      {showModal && (
        <div className='fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50'>
          <div
            ref={modalRef}
            className='w-full max-w-lg overflow-hidden rounded-lg bg-white shadow-lg'
          >
            <div className='flex items-center justify-between border-b p-4'>
              <h2 className='text-xl font-semibold'>
                {selectedLeague?.name} - Select Season
              </h2>
              <button
                className='text-gray-500 hover:text-gray-700'
                onClick={() => setShowModal(false)}
              >
                &times;
              </button>
            </div>
            <div className='p-6'>
              <div className='grid gap-4 sm:grid-cols-2'>
                {seasons.map(season => (
                  <div
                    key={season.season_id}
                    className='cursor-pointer rounded-lg bg-gray-100 p-4 text-center hover:bg-gray-200'
                    onClick={() =>
                      navigate(
                        `/league/${selectedLeague.id}/${season.season_id}`,
                      )
                    }
                  >
                    <h3 className='text-lg'>{season.season_name}</h3>
                  </div>
                ))}
              </div>
            </div>
            <div className='border-t p-4 text-right'>
              <button
                className='rounded-lg bg-gray-200 px-4 py-2 hover:bg-gray-300'
                onClick={() => setShowModal(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Home;

================
File: src/components/match/MatchDetails.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { LoadingSpinner, ErrorMessage } from '../common';
import MatchHeader from './MatchHeader';
import MatchLineups from './MatchLineups';
import * as api from '../../services/api';

const MatchDetails = () => {
  const { competitionId, seasonId, matchId } = useParams(); // Updated
  const navigate = useNavigate();
  const location = useLocation();
  const [matchData, setMatchData] = useState(location.state?.matchData || null);
  const [lineups, setLineups] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        // If we don't have match data from navigation state, fetch it
        let currentMatch = matchData;
        if (!currentMatch) {
          const matches = await api.getCompetitionMatches(
            competitionId,
            seasonId,
          ); // Updated
          currentMatch = matches.find(m => m.match_id.toString() === matchId);
          if (!currentMatch) throw new Error('Match not found');
          setMatchData(currentMatch);
        }

        // Fetch lineups
        const lineupsData = await api.getMatchLineups(matchId);
        console.log('Fetched lineups:', lineupsData);
        setLineups(lineupsData);
        setError(null);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Failed to load match data');
      } finally {
        setLoading(false);
      }
    };

    if (matchId) fetchData();
  }, [matchId, competitionId, seasonId, matchData]); // Updated dependencies

  const handlePlayerClick = player => {
    if (!player?.player_name) {
      console.error('Invalid player data:', player);
      return;
    }

    navigate(
      `/player-performance/${competitionId}/${seasonId}/${matchId}/${encodeURIComponent(player.player_name)}`, // Updated
      {
        state: {
          playerInfo: {
            playerId: player.player_id,
            playerName: player.player_name,
            nickname: player.nickname,
            jerseyNumber: player.jersey_number,
            team: player.team_name,
            position: player.positions?.[0]?.position,
          },
          matchData: matchData,
        },
      },
    );
  };

  if (loading) return <LoadingSpinner message='Loading match data...' />;
  if (error) return <ErrorMessage message={error} />;
  if (!matchData || !lineups) return null;

  return (
    <div className='container mx-auto px-4 py-4'>
      <MatchHeader matchData={matchData} />
      <MatchLineups
        lineups={lineups}
        matchData={matchData}
        onPlayerClick={handlePlayerClick}
      />
    </div>
  );
};

export default MatchDetails;

================
File: src/components/match/MatchHeader.js
================
import React from 'react';
import { format } from 'date-fns';
import { MapPin, User, Clock } from 'lucide-react';

const MatchHeader = ({ matchData }) => {
  if (!matchData) return null;

  const getStatusColor = status => {
    switch (status?.toLowerCase()) {
      case 'available':
        return 'bg-green-100 text-green-800';
      case 'scheduled':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className='mb-6 overflow-hidden rounded-lg bg-white shadow'>
      {/* Competition Info */}
      <div className='border-b border-gray-200 bg-blue-600 p-4 text-white'>
        <h2 className='text-2xl font-bold'>{matchData.competition}</h2>
        <p className='text-sm opacity-80'>
          {matchData.season} - {matchData.competition_stage}
        </p>
      </div>

      {/* Match Status & Date */}
      <div className='border-b border-gray-200 bg-gray-50 p-4'>
        <div className='flex items-center justify-between'>
          <div className='flex items-center gap-2'>
            <Clock className='h-4 w-4 text-gray-500' />
            <span className='text-sm text-gray-600'>
              {format(new Date(matchData.match_date), 'MMMM d, yyyy')} -{' '}
              {matchData.kick_off?.slice(0, 5)}
            </span>
          </div>
          <span
            className={`rounded-full px-3 py-1 text-sm ${getStatusColor(matchData.match_status)}`}
          >
            {matchData.match_status}
          </span>
        </div>
      </div>

      {/* Teams & Score */}
      <div className='grid grid-cols-7 items-center gap-4 p-6'>
        {/* Home Team */}
        <div className='col-span-3 text-right'>
          <h3 className='text-xl font-semibold'>{matchData.home_team}</h3>
          {matchData.home_managers && (
            <div className='mt-2 flex items-center justify-end gap-1 text-sm text-gray-600'>
              <User className='h-4 w-4' />
              {matchData.home_managers}
            </div>
          )}
        </div>

        {/* Score */}
        <div className='col-span-1 text-center'>
          <div className='text-2xl font-bold'>
            {typeof matchData.home_score === 'number' &&
            typeof matchData.away_score === 'number'
              ? `${matchData.home_score} - ${matchData.away_score}`
              : 'vs'}
          </div>
          {matchData.match_week && (
            <div className='mt-1 text-xs text-gray-500'>
              Week {matchData.match_week}
            </div>
          )}
        </div>

        {/* Away Team */}
        <div className='col-span-3 text-left'>
          <h3 className='text-xl font-semibold'>{matchData.away_team}</h3>
          {matchData.away_managers && (
            <div className='mt-2 flex items-center gap-1 text-sm text-gray-600'>
              <User className='h-4 w-4' />
              {matchData.away_managers}
            </div>
          )}
        </div>
      </div>

      {/* Additional Info */}
      {(matchData.stadium || matchData.referee) && (
        <div className='border-t border-gray-200 bg-gray-50 p-4'>
          <div className='flex flex-wrap items-center gap-6'>
            {matchData.stadium && (
              <div className='flex items-center gap-2 text-sm text-gray-600'>
                <MapPin className='h-4 w-4' />
                {matchData.stadium}
              </div>
            )}
            {matchData.referee && (
              <div className='flex items-center gap-2 text-sm text-gray-600'>
                <User className='h-4 w-4' />
                Referee: {matchData.referee}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default MatchHeader;

================
File: src/components/match/MatchLineups.js
================
import React, { useState } from 'react';
import TeamLineup from './TeamLineup';

const MatchLineups = ({ lineups, matchData, onPlayerClick }) => {
  const [showSubs, setShowSubs] = useState(true);

  // Debug logs
  console.log('Match Data:', matchData);
  console.log('Lineups Data:', lineups);

  // Ensure we have the required data
  if (!matchData?.home_team || !matchData?.away_team || !lineups) {
    return null;
  }

  const handleToggleSubs = () => {
    setShowSubs(!showSubs);
  };

  // Create lineup data for each team
  const homeTeam = {
    teamName: matchData.home_team,
    players: (lineups[matchData.home_team] || []).map(player => ({
      ...player,
      team_name: matchData.home_team,
    })),
  };

  const awayTeam = {
    teamName: matchData.away_team,
    players: (lineups[matchData.away_team] || []).map(player => ({
      ...player,
      team_name: matchData.away_team,
    })),
  };

  return (
    <div className='grid gap-6 md:grid-cols-2'>
      <TeamLineup
        teamName={homeTeam.teamName}
        players={homeTeam.players}
        onPlayerClick={onPlayerClick}
        showSubs={showSubs}
        onToggleSubs={handleToggleSubs}
        side='left'
      />
      <TeamLineup
        teamName={awayTeam.teamName}
        players={awayTeam.players}
        onPlayerClick={onPlayerClick}
        showSubs={showSubs}
        onToggleSubs={handleToggleSubs}
        side='right'
      />
    </div>
  );
};

export default MatchLineups;

================
File: src/components/match/TeamLineup.js
================
import React from 'react';
import { Users, ChevronDown, ChevronUp } from 'lucide-react';
import TeamLineupTable from './TeamLineupTable';

const TeamLineup = ({
  teamName,
  players,
  onPlayerClick,
  showSubs,
  onToggleSubs,
  side = 'left',
}) => {
  const getPlayerStatus = player => {
    if (!player.positions?.length) return 'Unknown';
    const startReason = player.positions[0].start_reason;
    if (startReason?.includes('Substitution - On')) return 'Substitute';
    if (startReason === 'Starting XI') return 'Starting XI';
    return startReason || 'Unknown';
  };

  const startingXI = players.filter(p => getPlayerStatus(p) === 'Starting XI');
  const substitutes = players.filter(
    p =>
      p.positions?.length > 0 &&
      p.positions[0].start_reason?.includes('Substitution - On'),
  );

  return (
    <div className='mb-6 overflow-hidden rounded-lg bg-white shadow'>
      <div className='border-b border-gray-200 bg-gray-50 px-4 py-3'>
        <div className='flex items-center justify-between'>
          <div className='flex items-center gap-2'>
            <Users className='h-5 w-5 text-gray-500' />
            <h5 className='m-0 font-semibold'>{teamName}</h5>
          </div>
        </div>
      </div>

      <div className='p-0'>
        <div className='border-b border-gray-100 bg-green-50/30 px-4 py-2'>
          <h6 className='m-0 text-sm font-semibold text-gray-600'>
            Starting XI ({startingXI.length})
          </h6>
        </div>

        <TeamLineupTable players={startingXI} onPlayerClick={onPlayerClick} />

        {substitutes.length > 0 && (
          <div className='border-t-2 border-blue-200'>
            <div
              className='flex cursor-pointer items-center justify-between bg-blue-50 px-4 py-3'
              onClick={onToggleSubs}
            >
              <h6 className='m-0 text-sm font-semibold text-gray-600'>
                Substitutes ({substitutes.length})
              </h6>
              {showSubs ? (
                <ChevronUp className='h-5 w-5 text-blue-500' />
              ) : (
                <ChevronDown className='h-5 w-5 text-blue-500' />
              )}
            </div>

            {showSubs && (
              <TeamLineupTable
                players={substitutes}
                onPlayerClick={onPlayerClick}
              />
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default TeamLineup;

================
File: src/components/match/TeamLineupTable.js
================
import React from 'react';

const TeamLineupTable = ({ players, onPlayerClick }) => (
  <table className='w-full'>
    <tbody>
      {players.map(player => (
        <tr
          key={player.player_id}
          onClick={() => onPlayerClick(player)}
          className='cursor-pointer border-b border-gray-50 hover:bg-gray-50'
        >
          <td className='px-4 py-3 text-sm'>{player.jersey_number || '-'}</td>
          <td className='px-4 py-3'>
            <div>
              <div className='font-medium'>
                {player.nickname || player.player_name}
              </div>
              {player.nationality && (
                <div className='text-xs text-gray-500'>
                  {player.nationality}
                </div>
              )}
            </div>
          </td>
          <td className='px-4 py-3 text-sm'>
            {player.positions?.[0]?.position || '-'}
          </td>
        </tr>
      ))}
    </tbody>
  </table>
);

export default TeamLineupTable;

================
File: src/components/pitch/BasePitch.js
================
import React from 'react';
import { ORIENTATIONS } from './constants';

const getViewBox = orientation => {
  switch (orientation) {
    case ORIENTATIONS.VERTICAL:
      return '0 -2 80 124';
    case ORIENTATIONS.HALF_VERTICAL:
      return '-2 -2 84 64';
    case ORIENTATIONS.HORIZONTAL:
    default:
      return '-2 -2 124 84';
  }
};

const getAspectRatio = orientation => {
  switch (orientation) {
    case ORIENTATIONS.VERTICAL:
      return 'aspect-[2/3]';
    case ORIENTATIONS.HALF_VERTICAL:
      return 'aspect-[4/3]';
    case ORIENTATIONS.HORIZONTAL:
    default:
      return 'aspect-[3/2]';
  }
};

const BasePitch = ({
  children,
  onPitchClick,
  orientation = ORIENTATIONS.HORIZONTAL,
  background = 'bg-white',
  stroke = '#CBD5E1',
  fill = 'none',
  maxWidth = 'max-w-3xl',
}) => {
  const isVertical = orientation === ORIENTATIONS.VERTICAL;
  const isHalfVertical = orientation === ORIENTATIONS.HALF_VERTICAL;

  const renderPitchElements = () => {
    if (isHalfVertical) {
      return (
        <>
          <rect x='0' y='0' width='80' height='60' />
          <line x1='0' y1='60' x2='80' y2='60' />
          <path d='M 30,60 A 10,10 0 0 1 50,60' />
          <circle cx='40' cy='60' r='0.3' fill={stroke} />
          <rect x='18' y='0' width='44' height='18' />
          <rect x='30' y='0' width='20' height='6' />
          <rect
            x='36'
            y='-0.5'
            width='8'
            height='0.5'
            style={{ fill: stroke }}
          />
          <path d='M 32.5,18 A 10,10 0 0,0 48,18' />
          <circle cx='40' cy='12' r='0.3' fill={stroke} />
          <path d='M 0,1 A 3,3 0 0,0 1,0' />
          <path d='M 79,0 A 3,3 0 0,0 80,1' />
        </>
      );
    }

    const standardElements = (
      <>
        <rect
          x='0'
          y='0'
          width={isVertical ? '80' : '120'}
          height={isVertical ? '120' : '80'}
          style={{ fill }}
        />
        {isVertical ? (
          <line x1='0' y1='60' x2='80' y2='60' />
        ) : (
          <line x1='60' y1='0' x2='60' y2='80' />
        )}
        <circle
          cx={isVertical ? '40' : '60'}
          cy={isVertical ? '60' : '40'}
          r='10'
        />
        <circle
          cx={isVertical ? '40' : '60'}
          cy={isVertical ? '60' : '40'}
          r='0.3'
          fill={stroke}
        />
        {/* Penalty areas and other elements */}
        {isVertical ? (
          <>
            {/* Vertical orientation penalty areas */}
            <rect x='18' y='0' width='44' height='18' />
            <rect x='30' y='0' width='20' height='6' />
            <rect x='18' y='102' width='44' height='18' />
            <rect x='30' y='114' width='20' height='6' />
            {/* Goals */}
            <rect
              x='36'
              y='-0.5'
              width='8'
              height='0.5'
              style={{ fill: stroke }}
            />
            <rect
              x='36'
              y='120'
              width='8'
              height='0.5'
              style={{ fill: stroke }}
            />
            {/* Penalty arcs */}
            <path d='M 32.5,18 A 10,10 0 0,0 48,18' />
            <path d='M 32.5,102 A 10,10 0 0,1 48,102' />
          </>
        ) : (
          <>
            {/* Horizontal orientation penalty areas */}
            <rect x='0' y='18' width='18' height='44' />
            <rect x='0' y='30' width='6' height='20' />
            <rect x='102' y='18' width='18' height='44' />
            <rect x='114' y='30' width='6' height='20' />
            {/* Goals */}
            <rect
              x='-0.5'
              y='36'
              width='0.5'
              height='8'
              style={{ fill: stroke }}
            />
            <rect
              x='120'
              y='36'
              width='0.5'
              height='8'
              style={{ fill: stroke }}
            />
            {/* Penalty arcs */}
            <path d='M 18,32.5 A 10,10 0 0,1 18,48' />
            <path d='M 102,32.5 A 10,10 0 0,0 102,48' />
          </>
        )}
      </>
    );

    return standardElements;
  };

  return (
    <div
      className={`relative ${getAspectRatio(orientation)} w-full ${maxWidth} border-2 border-slate-400 ${background}`}
    >
      <svg
        viewBox={getViewBox(orientation)}
        className='absolute inset-0 h-full w-full'
        style={{
          strokeWidth: '0.2',
          stroke,
          fill: 'none',
        }}
        onClick={onPitchClick}
      >
        {renderPitchElements()}
        {children}
      </svg>
    </div>
  );
};

export default BasePitch;

================
File: src/components/pitch/constants.js
================
export const ORIENTATIONS = {
  HORIZONTAL: 'horizontal',
  VERTICAL: 'vertical',
  HALF_VERTICAL: 'half-vertical',
};

export const COLOR_SCHEMES = {
  LIGHT: {
    background: 'bg-white',
    stroke: '#CBD5E1',
    fill: 'none',
  },
  DARK: {
    background: 'bg-black',
    stroke: '#CBD5E1',
    fill: '#121212',
  },
};

================
File: src/components/pitch/GoalPost.js
================
import React from 'react';

export const GoalPostVisualization = ({ children }) => {
  const goalStroke = 'grey'; // color of posts
  const lineStroke = 'black'; // ground color
  const goalStrokeWidth = 0.4; // Stroke width of the goal frame
  const lineStrokeWidth = 0.1; // Stroke width of the ground line
  const lineBottom = 2.67 + 2.67 + goalStrokeWidth / 2; // Calculate Y post of ground line (affected by width of the goal)

  //     viewBox="30 -1 20 7" ONLY SHOWING THE SIX YARD BOX CAN LATER MAP BACK TO OG COORD TO FIND MAX HEIGHT SHOWING
  //         |<---20--->|
  // 30      36    44      50
  // |       |     |       |
  // |       â­ââââââ®       |
  // |       â     â       |
  // |       â     â       |
  // |   âââââ´ââââââ´ââââ   |
  //     32         48

  // Y coordinate
  //    -1 â â â Above origin (top of view)
  //     0 ââââ Origin
  //     1 ââââ
  //     2 ââââ
  //     3 ââââ â­ââââââ®  Goal posts start at Y=2.67
  //     4 ââââ â     â
  //     5 ââââ â     â  Goal posts end at Y=5.34
  //     6 ââââ â´ââââââ´  Ground line at Y=5.74
  //     |
  //    7 units
  //    total
  //    height

  return (
    <div className='h-[300px] w-full'>
      <svg
        viewBox='30 -1 20 7'
        className='h-full w-full'
        preserveAspectRatio='xMidYMid meet'
      >
        {/* Goal frame as a path - only top and sides */}
        <path
          d='M36 5.34 L36 2.67 L44 2.67 L44 5.34'
          fill='none'
          stroke={goalStroke}
          strokeWidth={goalStrokeWidth}
          strokeLinejoin='round'
          strokeLinecap='square'
        />

        {/* Ground line */}
        <line
          x1='30'
          y1={lineBottom}
          x2='50'
          y2={lineBottom}
          stroke={lineStroke}
          strokeWidth={lineStrokeWidth}
          strokeLinecap='square'
        />

        {children}
      </svg>
    </div>
  );
};

export default GoalPostVisualization;

================
File: src/components/pitch/HalfVerticalPitch.js
================
import React from 'react';
import BasePitch from './BasePitch';
import { ORIENTATIONS, COLOR_SCHEMES } from './constants';

const HalfVerticalPitch = ({ children, onPitchClick }) => (
  <BasePitch
    orientation={ORIENTATIONS.HALF_VERTICAL}
    {...COLOR_SCHEMES.LIGHT}
    maxWidth='max-w-xl'
    onPitchClick={onPitchClick}
  >
    {children}
  </BasePitch>
);

export default HalfVerticalPitch;

================
File: src/components/pitch/HeatSoccerPitch.js
================
import React from 'react';
import BasePitch from './BasePitch';
import { ORIENTATIONS, COLOR_SCHEMES } from './constants';

const HeatSoccerPitch = ({ children, onPitchClick }) => (
  <BasePitch
    orientation={ORIENTATIONS.HORIZONTAL}
    {...COLOR_SCHEMES.DARK}
    onPitchClick={onPitchClick}
  >
    {children}
  </BasePitch>
);

export default HeatSoccerPitch;

================
File: src/components/pitch/index.js
================
export { default as SoccerPitch } from './SoccerPitch';
export { default as HeatSoccerPitch } from './HeatSoccerPitch';
export { default as VerticalSoccerPitch } from './VerticalSoccerPitch';
export { default as HalfVerticalPitch } from './HalfVerticalPitch';
export * from './constants';

================
File: src/components/pitch/SoccerPitch.js
================
import React from 'react';
import BasePitch from './BasePitch';
import { ORIENTATIONS, COLOR_SCHEMES } from './constants';

const SoccerPitch = ({ children, onPitchClick }) => (
  <BasePitch
    orientation={ORIENTATIONS.HORIZONTAL}
    {...COLOR_SCHEMES.LIGHT}
    onPitchClick={onPitchClick}
  >
    {children}
  </BasePitch>
);

export default SoccerPitch;

================
File: src/components/pitch/VerticalSoccerPitch.js
================
import React from 'react';
import BasePitch from './BasePitch';
import { ORIENTATIONS, COLOR_SCHEMES } from './constants';

const VerticalSoccerPitch = ({ children, onPitchClick }) => (
  <BasePitch
    orientation={ORIENTATIONS.VERTICAL}
    {...COLOR_SCHEMES.LIGHT}
    maxWidth='max-w-xl'
    onPitchClick={onPitchClick}
  >
    {children}
  </BasePitch>
);

export default VerticalSoccerPitch;

================
File: src/components/player/features/defending/DefendingItemDetails.js
================
import React from 'react';

export const DefendingItemDetails = ({ selectedItem }) => {
  if (!selectedItem) {
    return (
      <div className='text-center text-gray-500'>
        Select a defensive action to see details
      </div>
    );
  }

  return (
    <div className='grid grid-cols-3 gap-4'>
      <div>
        <p className='text-xs text-gray-500'>Action Type</p>
        <p className='text-sm font-bold'>{selectedItem.type}</p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Outcome</p>
        <p className='text-sm font-bold'>
          {selectedItem.outcome || 'Successful'}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Pressure Duration</p>
        <p className='text-sm font-bold'>
          {selectedItem.pressure_duration
            ? `${selectedItem.pressure_duration}s`
            : 'N/A'}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Duel Type</p>
        <p className='text-sm font-bold'>{selectedItem.duel_type || 'N/A'}</p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Recovery Type</p>
        <p className='text-sm font-bold'>
          {selectedItem.recovery_type || 'N/A'}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Pressure Regain</p>
        <p className='text-sm font-bold'>
          {selectedItem.pressure_regain ? 'Yes' : 'No'}
        </p>
      </div>
    </div>
  );
};

================
File: src/components/player/features/passing/PassingItemDetails.js
================
import React from 'react';

export const PassingItemDetails = ({ selectedItem }) => {
  if (!selectedItem) {
    return (
      <div className='text-center text-gray-500'>
        Select a pass to see details
      </div>
    );
  }

  return (
    <div className='grid grid-cols-3 gap-4'>
      <div>
        <p className='text-xs text-gray-500'>Pass Type</p>
        <p className='text-sm font-bold'>{selectedItem.pass_type}</p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Length</p>
        <p className='text-sm font-bold'>
          {selectedItem.pass_length?.toFixed(1)}m
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Outcome</p>
        <p className='text-sm font-bold'>
          {selectedItem.pass_outcome || 'Complete'}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Height</p>
        <p className='text-sm font-bold'>
          {selectedItem.pass_height || 'Ground'}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Progressive</p>
        <p className='text-sm font-bold'>
          {selectedItem.progressive ? 'Yes' : 'No'}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Assist</p>
        <p className='text-sm font-bold'>
          {selectedItem.assist ? 'Yes' : 'No'}
        </p>
      </div>
    </div>
  );
};

================
File: src/components/player/features/shooting/ShootingItemDetails.js
================
import React from 'react';

export const ShootingItemDetails = ({ selectedItem }) => {
  if (!selectedItem) {
    return (
      <div className='text-center text-gray-500'>
        Select a shot to see details
      </div>
    );
  }

  return (
    <div className='grid grid-cols-3 gap-4'>
      <div>
        <p className='text-xs text-gray-500'>Shot Outcome</p>
        <p className='text-sm font-bold'>{selectedItem.shot_outcome}</p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Expected Goals (xG)</p>
        <p className='text-sm font-bold'>
          {selectedItem.shot_statsbomb_xg?.toFixed(2)}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Shot Type</p>
        <p className='text-sm font-bold'>{selectedItem.shot_type}</p>
      </div>
    </div>
  );
};

================
File: src/components/player/features/summary/SummaryItemDetails.js
================
import React from 'react';

export const SummaryItemDetails = ({ selectedItem }) => {
  if (!selectedItem) {
    return (
      <div className='text-center text-gray-500'>
        Select a touch point to see details
      </div>
    );
  }

  return (
    <div className='grid grid-cols-3 gap-4'>
      <div>
        <p className='text-xs text-gray-500'>Touch Type</p>
        <p className='text-sm font-bold'>{selectedItem.type}</p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>X Location</p>
        <p className='text-sm font-bold'>
          {selectedItem.location[0].toFixed(1)}
        </p>
      </div>
      <div>
        <p className='text-xs text-gray-500'>Y Location</p>
        <p className='text-sm font-bold'>
          {selectedItem.location[1].toFixed(1)}
        </p>
      </div>
    </div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/statoverview/ShootingStatsOverview.js
================
import React from 'react';
import { StatCard } from './StatCard';

export const ShootingStatsOverview = ({ statistics }) => {
  if (!statistics) return null;

  return (
    <div className='grid grid-cols-2 gap-2'>
      {/* First row - Goals and xG side by side */}
      <StatCard label='Goals' value={`${statistics.goals}`} />
      <StatCard label='Expected Goals' value={statistics.total_xg.toFixed(2)} />

      {/* Second row */}
      <StatCard
        label='Shots on target'
        value={`${statistics.shots_on_target}`}
      />
      <StatCard
        label='Shots off target'
        value={`${statistics.shots_off_target}`}
      />

      {/* Only render shots blocked if not zero */}
      {statistics.shots_blocked > 0 && (
        <div className='col-span-2'>
          <StatCard
            label='Shots blocked'
            value={`${statistics.shots_blocked}`}
          />
        </div>
      )}

      {/* Accuracy and conversion side by side */}
      <StatCard
        label='Shooting accuracy'
        value={`${statistics.shot_accuracy}%`}
      />
      <StatCard
        label='Shot conversion'
        value={`${statistics.shot_conversion}%`}
      />
    </div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/statoverview/StatCard.js
================
export const StatCard = ({ label, value, className = '' }) => (
  <div className={`rounded-lg bg-gray-50 p-3 ${className}`}>
    <p className='text-xs text-gray-500'>{label}</p>
    <p className='text-lg font-bold'>{value}</p>
  </div>
);

================
File: src/components/player/PlayerMatchPerformance/components/statoverview/SummaryStatsOverview.js
================
import React from 'react';
import { StatCard } from './StatCard';

export const SummaryStatsOverview = ({ touches }) => {
  if (!touches) return null;

  return (
    <div className='grid grid-cols-3 gap-2 lg:grid-cols-1'>
      <StatCard label='Touches' value={touches.length} />
      <StatCard
        label='Shots'
        value={touches.filter(t => t.type === 'Shot').length}
      />
      <StatCard
        label='Passes'
        value={touches.filter(t => t.type === 'Pass').length}
      />
    </div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/ItemDetails.js
================
// src/components/ItemDetails.jsx
import React from 'react';
import { STAT_TYPES } from '../config/statTypes';
// EDIT FOR ONLY SUBSTAT
export const ItemDetails = ({ selectedStat, selectedItem }) => {
  const renderDetails = () => {
    switch (selectedStat) {
      case STAT_TYPES.SHOOTING:
        if (!selectedItem) {
          return (
            <div className='text-center text-gray-500'>
              Select a shot to see details
            </div>
          );
        }
        return (
          <div className='grid grid-cols-3 gap-4'>
            <div>
              <p className='text-xs text-gray-500'>Shot Outcome</p>
              <p className='text-sm font-bold'>{selectedItem.shot_outcome}</p>
            </div>
            <div>
              <p className='text-xs text-gray-500'>Expected Goals (xG)</p>
              <p className='text-sm font-bold'>
                {selectedItem.shot_statsbomb_xg?.toFixed(2)}
              </p>
            </div>
            <div>
              <p className='text-xs text-gray-500'>Shot Type</p>
              <p className='text-sm font-bold'>{selectedItem.shot_type}</p>
            </div>
          </div>
        );

      case STAT_TYPES.SUMMARY:
        if (!selectedItem) {
          return (
            <div className='text-center text-gray-500'>
              Select a touch point to see details
            </div>
          );
        }
        return (
          <div className='grid grid-cols-3 gap-4'>
            <div>
              <p className='text-xs text-gray-500'>Touch Type</p>
              <p className='text-sm font-bold'>{selectedItem.type}</p>
            </div>
            <div>
              <p className='text-xs text-gray-500'>X Location</p>
              <p className='text-sm font-bold'>
                {selectedItem.location[0].toFixed(1)}
              </p>
            </div>
            <div>
              <p className='text-xs text-gray-500'>Y Location</p>
              <p className='text-sm font-bold'>
                {selectedItem.location[1].toFixed(1)}
              </p>
            </div>
          </div>
        );

      default:
        return (
          <div className='text-center text-gray-500'>
            Select an item to see details
          </div>
        );
    }
  };

  return (
    <div className='rounded-lg bg-white p-4 shadow-sm'>{renderDetails()}</div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/PlayerProfile.js
================
import React from 'react';

export const PlayerProfile = ({ playerInfo = {} }) => {
  return (
    <div className='col-span-12 rounded-lg bg-white p-4 shadow-lg lg:col-span-3'>
      <div className='flex items-center space-x-4'>
        <div className='h-16 w-16 rounded-full bg-gray-200'>
          {playerInfo?.jerseyNumber && (
            <div className='flex h-full w-full items-center justify-center text-xl font-bold text-gray-600'>
              {playerInfo.jerseyNumber}
            </div>
          )}
        </div>
        <div>
          <h3 className='font-semibold'>
            {playerInfo?.nickname || playerInfo?.playerName || 'Player Name'}
          </h3>
          <p className='text-sm text-gray-600'>
            {playerInfo?.team} â¢ {playerInfo?.position || 'Position'}
          </p>
        </div>
      </div>
    </div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/StatNavigation.js
================
import React from 'react';
import { statCategories } from '../config/statConfig';

export const StatNavigation = ({ selectedStat, onStatChange }) => (
  <div className='col-span-12 flex items-center rounded-lg bg-white px-6 py-4 shadow-lg lg:col-span-9'>
    <div className='flex space-x-4 overflow-x-auto'>
      {statCategories.map(category => (
        <button
          key={category.id}
          className={`whitespace-nowrap rounded-full px-4 py-1.5 text-sm font-medium transition-colors ${
            selectedStat === category.id
              ? 'bg-blue-500 text-white'
              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}
          onClick={() => onStatChange(category)}
        >
          {category.name}
        </button>
      ))}
    </div>
  </div>
);

================
File: src/components/player/PlayerMatchPerformance/components/StatOverview.js
================
import { STAT_TYPES, STAT_TITLES } from '../config/statTypes';
import { ShootingStatsOverview } from './statoverview/ShootingStatsOverview';
import { SummaryStatsOverview } from './statoverview/SummaryStatsOverview';

export const StatOverview = ({ selectedStat, data }) => {
  const renderStats = () => {
    switch (selectedStat) {
      case STAT_TYPES.SHOOTING:
        return <ShootingStatsOverview statistics={data?.statistics} />;
      case STAT_TYPES.SUMMARY:
        return <SummaryStatsOverview touches={data?.touches} />;
      default:
        return null;
    }
  };

  return (
    <div className='mb-4 rounded-lg bg-white p-4 shadow-lg'>
      <h3 className='mb-3 text-lg font-semibold'>
        {STAT_TITLES[selectedStat] || 'Overview'}
      </h3>
      {renderStats()}
    </div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/SubStatNavigation.js
================
import React from 'react';
import { statCategories } from '../config/statConfig'; // change for getSubStatTypes(selectedStat);

export const SubStatNavigation = ({
  selectedStat,
  selectedSubStat,
  onSubStatChange,
}) => {
  const subStats =
    statCategories.find(cat => cat.id === selectedStat)?.subStats || [];

  return (
    <div className='mb-4 flex space-x-4 overflow-x-auto'>
      {subStats.map(subStat => (
        <button
          key={subStat.id}
          className={`whitespace-nowrap rounded-md px-4 py-2 ${
            selectedSubStat === subStat.id
              ? 'bg-blue-100 text-blue-700'
              : 'text-gray-600 hover:bg-gray-100'
          }`}
          onClick={() => onSubStatChange(subStat.id)}
        >
          {subStat.name}
        </button>
      ))}
    </div>
  );
};

================
File: src/components/player/PlayerMatchPerformance/components/Visualization.js
================
// src/components/Visualization.jsx
import React from 'react';
import { STAT_TYPES } from '../config/statTypes';
import { statCategories } from '../config/statConfig';

export const Visualization = ({
  selectedStat,
  selectedSubStat,
  data,
  selectedItem,
  onItemClick,
}) => {
  const category = statCategories.find(cat => cat.id === selectedStat);
  const subStat = category?.subStats.find(sub => sub.id === selectedSubStat);

  if (!subStat) return null;

  const { container: Container, component: Component } = subStat;

  // Determine props based on stat type
  const getComponentProps = () => {
    switch (selectedStat) {
      case STAT_TYPES.SHOOTING:
        return {
          shots: data?.shots || [],
          onShotClick: onItemClick,
          selectedShot: selectedItem,
          showLabels: false,
        };

      case STAT_TYPES.SUMMARY:
        return {
          touches: data?.touches || [], // Fix: Access touches from data object
          onTouchClick: onItemClick,
          selectedTouch: selectedItem,
          showLabels: false,
        };

      case STAT_TYPES.PASSING:
        return {
          passes: data?.passes || [],
          onPassClick: onItemClick,
          selectedPass: selectedItem,
          showLabels: false,
        };

      case STAT_TYPES.DEFENDING:
        return {
          actions: data?.actions || [],
          onActionClick: onItemClick,
          selectedAction: selectedItem,
          showLabels: false,
        };

      default:
        return {};
    }
  };

  const componentProps = getComponentProps();

  return (
    <Container>
      <Component {...componentProps} />
    </Container>
  );
};

// component = touches and container = pitch

================
File: src/components/player/PlayerMatchPerformance/config/statConfig.js
================
import { STAT_TYPES } from './statTypes';
import SoccerPitch from '../../../pitch/SoccerPitch';
import VerticalSoccerPitch from '../../../pitch/VerticalSoccerPitch';
import HalfVerticalPitch from '../../../pitch/HalfVerticalPitch';
import { GoalPostVisualization } from '../../../pitch/GoalPost';
import PlayerMatchTouches from '../visualizations/PlayerMatchTouches';
import PlayerMatchShots from '../visualizations/PlayerMatchShots';

export const statCategories = [
  {
    id: STAT_TYPES.SUMMARY, // Using new enum
    name: 'Summary',
    subStats: [
      {
        id: 'touches',
        name: 'Touches',
        container: ({ children }) => (
          <div className='w-full'>
            <SoccerPitch>{children}</SoccerPitch>
          </div>
        ),
        component: props => (
          <PlayerMatchTouches {...props} orientation='horizontal' />
        ),
      },
      {
        id: 'heatmap',
        name: 'Heatmap',
        container: ({ children }) => (
          <div className='mx-auto w-full max-w-xl'>
            <VerticalSoccerPitch>{children}</VerticalSoccerPitch>
          </div>
        ),
        component: props => (
          <PlayerMatchTouches {...props} orientation='vertical' />
        ),
      },
    ],
  },
  {
    id: STAT_TYPES.SHOOTING,
    name: 'Shooting',
    subStats: [
      {
        id: 'shots-vertical',
        name: 'Shots (Vertical)',
        container: ({ children }) => (
          <div className='mx-auto w-full max-w-xl'>
            <HalfVerticalPitch>{children}</HalfVerticalPitch>
          </div>
        ),
        component: props => (
          <PlayerMatchShots {...props} orientation='vertical' />
        ),
      },
      {
        id: 'shots-horizontal',
        name: 'Shots (Horizontal)',
        container: ({ children }) => (
          <div className='w-full'>
            <SoccerPitch>{children}</SoccerPitch>
          </div>
        ),
        component: props => (
          <PlayerMatchShots {...props} orientation='horizontal' />
        ),
      },
      {
        id: 'shots-goalview',
        name: 'Shots (Goal View)',
        container: ({ children }) => (
          <div className='w-full'>
            <GoalPostVisualization>{children}</GoalPostVisualization>
          </div>
        ),
        component: props => (
          <PlayerMatchShots {...props} orientation='goalview' />
        ),
      },
    ],
  },
  // New categories
  {
    id: STAT_TYPES.PASSING,
    name: 'Passing',
    subStats: [
      {
        id: 'passMap',
        name: 'Pass Map',
        container: ({ children }) => (
          <div className='w-full'>
            <GoalPostVisualization>{children}</GoalPostVisualization>
          </div>
        ),
        component: PlayerMatchTouches, // You'll need to create passing specific components
      },
    ],
  },
  {
    id: STAT_TYPES.DEFENDING,
    name: 'Defending',
    subStats: [
      {
        id: 'defensiveActions',
        name: 'Defensive Actions',
        container: ({ children }) => (
          <div className='w-full'>
            <SoccerPitch>{children}</SoccerPitch>
          </div>
        ),
        component: PlayerMatchTouches, // You'll need to create defending specific components
      },
    ],
  },
];

export const getStatConfig = statType => {
  return statCategories.find(config => config.id === statType);
};

================
File: src/components/player/PlayerMatchPerformance/config/statTypes.js
================
export const STAT_TYPES = {
  SUMMARY: 'summary',
  SHOOTING: 'shooting',
  PASSING: 'passing',
  DEFENDING: 'defending',
};

export const SUB_STAT_TYPES = {
  SUMMARY: {
    TOUCHES: 'touches',
    HEATMAP: 'heatmap',
  },
  SHOOTING: {
    SHOTS_VERTICAL: 'shots-vertical',
    SHOTS_HORIZONTAL: 'shots-horizontal',
    SHOTS_GOALVIEW: 'shots-goalview',
  },
  PASSING: {
    PASS_MAP: 'passMap',
  },
  DEFENDING: {
    DEFENSIVE_ACTIONS: 'defensiveActions',
  },
};

export const STAT_TITLES = {
  [STAT_TYPES.SUMMARY]: 'Match Overview',
  [STAT_TYPES.SHOOTING]: 'Shooting Overview',
  [STAT_TYPES.PASSING]: 'Passing Overview',
  [STAT_TYPES.DEFENDING]: 'Defending Overview',
};

export const getSubStatTypes = statType => {
  switch (statType) {
    case STAT_TYPES.SUMMARY:
      return SUB_STAT_TYPES.SUMMARY;
    case STAT_TYPES.SHOOTING:
      return SUB_STAT_TYPES.SHOOTING;
    case STAT_TYPES.PASSING:
      return SUB_STAT_TYPES.PASSING;
    case STAT_TYPES.DEFENDING:
      return SUB_STAT_TYPES.DEFENDING;
    default:
      return {};
  }
};

export const getDefaultSubStat = statType => {
  switch (statType) {
    case STAT_TYPES.SUMMARY:
      return SUB_STAT_TYPES.SUMMARY.TOUCHES;
    case STAT_TYPES.SHOOTING:
      return SUB_STAT_TYPES.SHOOTING.SHOTS_VERTICAL;
    case STAT_TYPES.PASSING:
      return SUB_STAT_TYPES.PASSING.PASS_MAP;
    case STAT_TYPES.DEFENDING:
      return SUB_STAT_TYPES.DEFENDING.DEFENSIVE_ACTIONS;
    default:
      return '';
  }
};

================
File: src/components/player/PlayerMatchPerformance/hooks/useStatData.js
================
import { useState, useEffect } from 'react';
import { STAT_TYPES } from '../config/statTypes';
import * as api from '../../../../services/api';

export const useStatData = (matchId, playerName, selectedStat) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      if (!matchId || !playerName) {
        setLoading(false);
        return;
      }

      setLoading(true);
      setError(null);

      try {
        let result;

        switch (selectedStat) {
          case STAT_TYPES.SUMMARY: {
            const touchesData = await api.getPlayerMatchTouches(
              matchId,
              playerName,
            );
            result = {
              touches: touchesData,
            };
            break;
          }

          case STAT_TYPES.SHOOTING: {
            result = await api.getPlayerMatchShooting(matchId, playerName);
            break;
          }

          case STAT_TYPES.PASSING: {
            const passingData = await api.getPlayerMatchPassing(
              matchId,
              playerName,
            );
            result = {
              passes: passingData,
            };
            break;
          }

          case STAT_TYPES.DEFENDING: {
            const defendingData = await api.getPlayerMatchDefending(
              matchId,
              playerName,
            );
            result = {
              actions: defendingData,
            };
            break;
          }

          default:
            throw new Error(`Invalid stat type: ${selectedStat}`);
        }

        setData(result);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(err.message || 'Failed to load data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [matchId, playerName, selectedStat]);

  return {
    data,
    loading,
    error,
    refresh: () => {
      setData(null);
      setLoading(true);
    },
  };
};

================
File: src/components/player/PlayerMatchPerformance/visualizations/index.js
================
export { default as PlayerMatchShots } from './PlayerMatchShots';
export { default as PlayerMatchTouches } from './PlayerMatchTouches';
export { default as PlayerVertMatchTouches } from './PlayerVertMatchTouches';

================
File: src/components/player/PlayerMatchPerformance/visualizations/PlayerMatchShots.js
================
import React, { useCallback } from 'react';

const PlayerMatchShots = ({
  shots = [],
  onShotClick,
  selectedShot,
  showLabels = true,
  orientation = 'vertical',
}) => {
  const handleShotClick = useCallback(
    (shot, event) => {
      event.stopPropagation();
      onShotClick?.(shot);
    },
    [onShotClick],
  );

  const getShotRadius = (xg, isGoalView) => {
    if (isGoalView) {
      return 0.2; // Smaller, fixed size for goal view
    }

    if (!xg) return 1;
    const xgValue = parseFloat(xg);
    if (xgValue <= 0.05) return 0.8;
    if (xgValue <= 0.15) return 1.2;
    if (xgValue <= 0.25) return 1.6;
    if (xgValue <= 0.35) return 2;
    return 2.4;
  };

  const getShotStyle = (shot, isSelected, isGoalView) => {
    const isGoal = shot.shot_outcome === 'Goal';
    return {
      fill: isGoal ? 'rgba(244, 63, 94, 0.6)' : 'rgba(0, 0, 0, 0.1)',
      stroke: isGoal ? '#000000' : '#000000',
      strokeWidth: isSelected
        ? isGoalView
          ? '0.1'
          : '0.4'
        : isGoalView
          ? '0.05'
          : '0.2',
      cursor: 'pointer',
    };
  };

  const mapRange = (value, a, b, c, d) => {
    return c + ((value - a) * (d - c)) / (b - a);
  };

  const getCoordinates = (location, isEndLocation = false) => {
    if (!location) return { x: 0, y: 0 };

    const [originalX, originalY, originalZ] = location;

    if (orientation === 'goalview' && isEndLocation) {
      return {
        x: originalY,
        y: originalZ !== undefined ? mapRange(originalZ, 0, 5.34, 5.34, 0) : 0,
      };
    }

    if (orientation === 'vertical') {
      return {
        x: originalY,
        y: 120 - originalX,
      };
    }

    return {
      x: originalX,
      y: originalY,
    };
  };

  const getLineStartPoint = (start, end, radius, isSelected) => {
    const startCoord = getCoordinates(start);
    const endCoord = getCoordinates(end);

    const dx = endCoord.x - startCoord.x;
    const dy = endCoord.y - startCoord.y;
    const length = Math.sqrt(dx * dx + dy * dy);
    const totalRadius = radius + (isSelected ? 0.5 : 0);

    return {
      x: startCoord.x + (dx / length) * totalRadius,
      y: startCoord.y + (dy / length) * totalRadius,
    };
  };

  return (
    <>
      {shots.map((shot, index) => {
        const isGoalView = orientation === 'goalview';
        const coords = isGoalView
          ? getCoordinates(shot.shot_end_location, true)
          : getCoordinates(shot.location);

        const isSelected = selectedShot?.id === shot.id;
        const shotStyle = getShotStyle(shot, isSelected, isGoalView);
        const radius = getShotRadius(shot.shot_statsbomb_xg, isGoalView);

        // Skip shots without end location for goalview
        if (isGoalView && !shot.shot_end_location) {
          return null;
        }

        return (
          <g
            key={shot.id || `${index}-${coords.x}-${coords.y}`}
            onClick={e => handleShotClick(shot, e)}
          >
            {isSelected && (
              <circle
                cx={coords.x}
                cy={coords.y}
                r={radius + (isGoalView ? 0.14 : 0.6)}
                fill='none'
                stroke='rgb(255, 0, 0)'
                strokeWidth={isGoalView ? '0.1' : '0.4'}
              />
            )}

            <circle cx={coords.x} cy={coords.y} r={radius} style={shotStyle} />

            {showLabels && !isGoalView && (
              <text
                x={coords.x}
                y={coords.y - radius - 0.5}
                fontSize='2'
                fill={shotStyle.stroke}
                textAnchor='middle'
                alignmentBaseline='bottom'
              >
                {index + 1}
              </text>
            )}

            {/* Only show trajectory line for pitch views, not goalview */}
            {isSelected && shot.shot_end_location && !isGoalView && (
              <line
                x1={
                  getLineStartPoint(
                    shot.location,
                    shot.shot_end_location,
                    radius,
                    true,
                  ).x
                }
                y1={
                  getLineStartPoint(
                    shot.location,
                    shot.shot_end_location,
                    radius,
                    true,
                  ).y
                }
                x2={getCoordinates(shot.shot_end_location).x}
                y2={getCoordinates(shot.shot_end_location).y}
                stroke='rgb(255, 0, 0)'
                strokeWidth='0.4'
              />
            )}
          </g>
        );
      })}
    </>
  );
};

export default PlayerMatchShots;

================
File: src/components/player/PlayerMatchPerformance/visualizations/PlayerMatchTouches.js
================
import React, { useCallback } from 'react';

const PlayerMatchTouches = ({
  touches = [],
  onTouchClick,
  selectedTouch,
  showLabels = true,
  orientation = 'horizontal', // New prop to control orientation
}) => {
  const handleTouchClick = useCallback(
    (touch, event) => {
      if (onTouchClick) {
        event.stopPropagation();
        onTouchClick(touch);
      }
    },
    [onTouchClick],
  );

  const getTouchStyle = touch => {
    const touchColors = {
      Shot: 'rgba(59, 130, 246, 0.5)',
      assist: 'rgba(234, 179, 8, 0.5)',
      default: 'rgba(234, 179, 8, 0.5)',
    };

    const borderColors = {
      Shot: 'rgb(59, 130, 246)',
      assist: 'rgb(234, 179, 8)',
      default: 'rgb(234, 179, 8)',
    };

    return {
      fill: touchColors[touch.type] || touchColors.default,
      stroke: borderColors[touch.type] || borderColors.default,
      strokeWidth: selectedTouch === touch ? '0.4' : '0.2',
    };
  };

  const getCoordinates = touch => {
    const [originalX, originalY] = touch.location;
    if (orientation === 'vertical') {
      return {
        x: originalY,
        y: 120 - originalX, // Assuming 120 is the pitch height
      };
    }
    return {
      x: originalX,
      y: originalY,
    };
  };

  return (
    <>
      {touches.map((touch, index) => {
        const { x, y } = getCoordinates(touch);
        const touchStyle = getTouchStyle(touch);

        return (
          <g
            key={`${index}-${touch.type}-${x}-${y}`}
            onClick={e => handleTouchClick(touch, e)}
            style={{ cursor: 'pointer' }}
          >
            {selectedTouch === touch && (
              <circle
                cx={x}
                cy={y}
                r='1.5'
                fill='none'
                stroke='rgb(239, 68, 68)'
                strokeWidth='0.2'
                strokeDasharray='0.5'
              />
            )}

            <circle cx={x} cy={y} r='1' {...touchStyle} />

            {showLabels && (
              <text
                x={x}
                y={y - 1.5}
                fontSize='2'
                fill={touchStyle.stroke}
                textAnchor='middle'
                alignmentBaseline='bottom'
              >
                {index + 1}
              </text>
            )}
          </g>
        );
      })}
    </>
  );
};

export default PlayerMatchTouches;

================
File: src/components/player/PlayerMatchPerformance/PlayerMatchPerformance.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import { STAT_TYPES, getDefaultSubStat } from './config/statTypes';
import { useStatData } from './hooks/useStatData';
import { PlayerProfile } from './components/PlayerProfile';
import { StatNavigation } from './components/StatNavigation';
import { StatOverview } from './components/StatOverview';
import { SubStatNavigation } from './components/SubStatNavigation';
import { ItemDetails } from './components/ItemDetails';
import { Visualization } from './components/Visualization';
import MatchHeader from '../../match/MatchHeader';
import * as api from '../../../services/api';

const LOADING_DELAY = 500;
const MAX_RETRY_ATTEMPTS = 2;
const RETRY_DELAY = 1000;

const PlayerMatchPerformance = () => {
  const { competitionId, seasonId, matchId, playerName } = useParams();
  const location = useLocation();
  const navigate = useNavigate();

  const [playerInfo, setPlayerInfo] = useState(
    location.state?.playerInfo || null,
  );
  const [matchData, setMatchData] = useState(location.state?.matchData || null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [retryCount, setRetryCount] = useState(0);

  const [selectedStat, setSelectedStat] = useState(STAT_TYPES.SUMMARY);
  const [selectedSubStat, setSelectedSubStat] = useState(
    getDefaultSubStat(STAT_TYPES.SUMMARY),
  );
  const [selectedTeam, setSelectedTeam] = useState('team1');
  const [selectedItem, setSelectedItem] = useState(null);

  // Initial loading delay
  useEffect(() => {
    const timer = setTimeout(() => {
      if (!location.state) {
        setIsLoading(false);
      }
    }, LOADING_DELAY);

    return () => clearTimeout(timer);
  }, [location.state]);

  // Load match data with retries
  useEffect(() => {
    const getMatch = async () => {
      if (!matchData && !isLoading) {
        try {
          const matches = await api.getCompetitionMatches(
            competitionId,
            seasonId,
          );
          const match = matches.find(m => m.match_id.toString() === matchId);

          if (!match) {
            throw new Error('Match not found');
          }

          setMatchData(match);
          setError(null);
        } catch (error) {
          console.error('Error fetching match:', error);

          if (retryCount < MAX_RETRY_ATTEMPTS) {
            setTimeout(() => {
              setRetryCount(prev => prev + 1);
            }, RETRY_DELAY);
          } else {
            setError('Unable to load match data. Please try again later.');
          }
        }
      }
    };
    getMatch();
  }, [matchData, competitionId, seasonId, matchId, isLoading, retryCount]);

  // Load player info with validation
  useEffect(() => {
    const getPlayer = async () => {
      if (!playerInfo && matchData) {
        try {
          const lineupsData = await api.getMatchLineups(matchId);

          if (!lineupsData || Object.keys(lineupsData).length === 0) {
            throw new Error('No lineup data available');
          }

          const allPlayers = [
            ...(Object.values(lineupsData)[0] || []),
            ...(Object.values(lineupsData)[1] || []),
          ];

          const decodedPlayerName = decodeURIComponent(playerName);
          const player = allPlayers.find(
            p =>
              p.player_name === decodedPlayerName ||
              p.nickname === decodedPlayerName,
          );

          if (!player) {
            throw new Error('Player not found in match lineup');
          }

          setPlayerInfo({
            playerId: player.player_id,
            playerName: player.player_name,
            nickname: player.nickname,
            jerseyNumber: player.jersey_number,
            team: Object.keys(lineupsData).find(team =>
              lineupsData[team].some(p => p.player_id === player.player_id),
            ),
            position: player.positions?.[0]?.position,
          });
          setError(null);
        } catch (error) {
          console.error('Error fetching player:', error);
          setError(
            error.message === 'Player not found in match lineup'
              ? 'Player not found in match lineup. Please check the player name and try again.'
              : 'Unable to load player data. Please try again later.',
          );
        }
      }
    };
    getPlayer();
  }, [playerInfo, matchData, matchId, playerName]);

  const {
    data,
    loading: statsLoading,
    error: statsError,
  } = useStatData(
    matchData && playerInfo ? matchId : null,
    playerInfo?.playerName || null,
    selectedStat,
  );

  const handleStatChange = category => {
    setSelectedStat(category.id);
    setSelectedSubStat(getDefaultSubStat(category.id));
    setSelectedItem(null);
  };

  const handleSubStatChange = subStatId => {
    setSelectedSubStat(subStatId);
    setSelectedItem(null);
  };

  const handleItemClick = item => {
    setSelectedItem(prev => (prev === item ? null : item));
  };

  const handleRetry = () => {
    setError(null);
    setRetryCount(0);
    setIsLoading(true);
    setTimeout(() => setIsLoading(false), LOADING_DELAY);
  };

  // Error UI
  if (error) {
    return (
      <div className='flex h-screen flex-col items-center justify-center bg-gray-100'>
        <div className='rounded-lg bg-white p-8 shadow-lg'>
          <h2 className='mb-4 text-xl font-bold text-red-600'>Error</h2>
          <p className='mb-6 text-gray-700'>{error}</p>
          <div className='flex gap-4'>
            <button
              onClick={handleRetry}
              className='rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600'
            >
              Try Again
            </button>
            <button
              onClick={() => navigate(-1)}
              className='rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600'
            >
              Go Back
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Loading UI
  if (isLoading || !matchData || !playerInfo) {
    return (
      <div className='flex h-screen flex-col items-center justify-center bg-gray-100'>
        <div className='h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent' />
        <p className='mt-4 text-gray-600'>Loading match data...</p>
      </div>
    );
  }

  return (
    <div className='min-h-screen bg-gray-100'>
      <div className='container mx-auto px-4 py-8'>
        <div className='mb-6'>
          <MatchHeader matchData={matchData} />
        </div>

        <div className='grid grid-cols-12 gap-4'>
          <div className='col-span-12 grid grid-cols-12 gap-4'>
            <PlayerProfile playerInfo={playerInfo} />
            <StatNavigation
              selectedStat={selectedStat}
              onStatChange={handleStatChange}
            />
          </div>

          <div className='col-span-12 lg:col-span-3'>
            <StatOverview selectedStat={selectedStat} data={data} />
          </div>

          <div className='col-span-12 lg:col-span-9'>
            <div className='rounded-lg bg-white shadow-lg'>
              <div className='px-6 pt-4'>
                <SubStatNavigation
                  selectedStat={selectedStat}
                  selectedSubStat={selectedSubStat}
                  onSubStatChange={handleSubStatChange}
                />
              </div>

              <div className='px-6 pb-6'>
                {statsLoading ? (
                  <div className='flex h-64 items-center justify-center'>
                    <div className='h-8 w-8 animate-spin rounded-full border-4 border-blue-500 border-t-transparent' />
                  </div>
                ) : statsError ? (
                  <div className='flex h-64 items-center justify-center'>
                    <div className='text-center'>
                      <p className='mb-4 text-red-500'>{statsError}</p>
                      <button
                        onClick={handleRetry}
                        className='rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600'
                      >
                        Retry
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <Visualization
                      selectedStat={selectedStat}
                      selectedSubStat={selectedSubStat}
                      data={data}
                      selectedItem={selectedItem}
                      onItemClick={handleItemClick}
                    />

                    <div className='mt-4 rounded-lg bg-gray-50 p-4'>
                      <ItemDetails
                        selectedStat={selectedStat}
                        selectedItem={selectedItem}
                      />
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className='mt-4 flex justify-center'>
          <button
            className='rounded-full bg-gray-800 px-6 py-2 text-white shadow-lg hover:bg-gray-700'
            onClick={() =>
              setSelectedTeam(prev => (prev === 'team1' ? 'team2' : 'team1'))
            }
          >
            Switch to {selectedTeam === 'team1' ? 'Team 2' : 'Team 1'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default PlayerMatchPerformance;

================
File: src/services/api.js
================
import axios from 'axios';

const API_URL = 'http://127.0.0.1:8000/api/';

// Configure axios instance
const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add logging
apiClient.interceptors.request.use(request => {
  console.log('Making request to:', request.url);
  return request;
});

apiClient.interceptors.response.use(
  response => response,
  error => {
    console.error('API Error:', error?.response?.data || error.message);
    throw error;
  },
);

// =====================================
// Competition & Season Related Endpoints
// =====================================

export const getCompetitions = async () => {
  try {
    const response = await apiClient.get('competitions/');
    return response.data;
  } catch (error) {
    console.error('Failed to fetch competitions:', error);
    throw new Error('Failed to load competitions');
  }
};

export const getSeasons = async competitionId => {
  try {
    const response = await apiClient.get(`seasons/${competitionId}/`);
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch seasons for competition ${competitionId}:`,
      error,
    );
    throw new Error('Failed to load seasons');
  }
};

export const getCompetitionInfo = async (competitionId, seasonId) => {
  try {
    const response = await apiClient.get(
      `competition-info/${competitionId}/${seasonId}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch competition info for competition ${competitionId}, season ${seasonId}:`,
      error,
    );
    throw new Error('Failed to load competition information');
  }
};

export const getCompetitionMatches = async (competitionId, seasonId) => {
  try {
    const response = await apiClient.get(
      `matches/${competitionId}/${seasonId}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch matches for competition ${competitionId}, season ${seasonId}:`,
      error,
    );
    throw new Error('Failed to load matches');
  }
};

// =====================================
// Match Related Endpoints
// =====================================

export const getMatchInfo = async matchId => {
  try {
    const response = await apiClient.get(`match-info/${matchId}/`);
    return response.data;
  } catch (error) {
    console.error(`Failed to fetch match info for match ${matchId}:`, error);
    throw new Error('Failed to load match information');
  }
};

export const getMatchLineups = async matchId => {
  try {
    const response = await apiClient.get(`match-lineups/${matchId}/`);
    return response.data;
  } catch (error) {
    console.error(`Failed to fetch lineups for match ${matchId}:`, error);
    throw new Error('Failed to load match lineups');
  }
};

// =====================================
// Player Match Performance Endpoints
// =====================================

export const getPlayerMatchTouches = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `player-match-touches/${matchId}/${encodeURIComponent(playerName)}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch touch data for match ${matchId}, player ${playerName}:`,
      error,
    );
    throw new Error('Failed to load player touch data');
  }
};

export const getPlayerMatchPassing = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `player-match-passing/${matchId}/${encodeURIComponent(playerName)}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch passing data for match ${matchId}, player ${playerName}:`,
      error,
    );
    throw new Error('Failed to load player passing data');
  }
};

export const getPlayerMatchShooting = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `player-match-shooting/${matchId}/${encodeURIComponent(playerName)}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch shooting data for match ${matchId}, player ${playerName}:`,
      error,
    );
    throw new Error('Failed to load player shooting data');
  }
};

export const getPlayerMatchDefending = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `player-match-def/${matchId}/${encodeURIComponent(playerName)}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch defending data for match ${matchId}, player ${playerName}:`,
      error,
    );
    throw new Error('Failed to load player defending data');
  }
};

export const getPlayerMatchPossession = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `player-match-poss/${matchId}/${encodeURIComponent(playerName)}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch possession data for match ${matchId}, player ${playerName}:`,
      error,
    );
    throw new Error('Failed to load player possession data');
  }
};

export const getGoalkeeperMatchStats = async (matchId, playerName) => {
  try {
    const response = await apiClient.get(
      `player-gk/${matchId}/${encodeURIComponent(playerName)}/`,
    );
    return response.data;
  } catch (error) {
    console.error(
      `Failed to fetch goalkeeper data for match ${matchId}, player ${playerName}:`,
      error,
    );
    throw new Error('Failed to load goalkeeper data');
  }
};

================
File: src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Home from './components/homepage/Home';
import CompetitionOverview from './components/competition/CompetitionOverview';
import BaseLayout from './components/common/BaseLayout';
import MatchDetails from './components/match/MatchDetails';
import PlayerMatchPerformance from './components/player/PlayerMatchPerformance/PlayerMatchPerformance';
import './index.css';

function App() {
  return (
    <Router>
      <BaseLayout>
        <Routes>
          <Route path='/' element={<Home />} />
          <Route
            path='/league/:competitionId/:seasonId'
            element={<CompetitionOverview />}
          />
          {/* Updated match route to include competition and season IDs */}
          <Route
            path='/match/:competitionId/:seasonId/:matchId'
            element={<MatchDetails />}
          />
          {/* Updated player performance route */}
          <Route
            path='/player-performance/:competitionId/:seasonId/:matchId/:playerName'
            element={<PlayerMatchPerformance />}
          />
        </Routes>
      </BaseLayout>
    </Router>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-900;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: .prettierrc
================
{
  "arrowParens": "avoid",
  "bracketSpacing": true,
  "htmlWhitespaceSensitivity": "css",
  "jsxSingleQuote": true,
  "printWidth": 80,
  "proseWrap": "always",
  "endOfLine": "lf",
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "all",
  "quoteProps": "as-needed",
  "useTabs": false,
  "plugins": ["prettier-plugin-tailwindcss"]
}

================
File: package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "bootstrap": "^5.3.3",
    "date-fns": "^2.30.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.5",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.27.0",
    "react-scripts": "^5.0.1",
    "theme-change": "^2.5.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts --openssl-legacy-provider start",
    "build": "react-scripts --openssl-legacy-provider build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "daisyui": "^4.12.14",
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.8",
    "tailwindcss": "^3.4.14"
  }
}

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with
[Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about
[running tests](https://facebook.github.io/create-react-app/docs/running-tests)
for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the
best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about
[deployment](https://facebook.github.io/create-react-app/docs/deployment) for
more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can
`eject` at any time. This command will remove the single build dependency from
your project.

Instead, it will copy all the configuration files and the transitive
dependencies (webpack, Babel, ESLint, etc) right into your project so you have
full control over them. All of the commands except `eject` will still work, but
they will point to the copied scripts so you can tweak them. At this point
you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for
small and middle deployments, and you shouldn't feel obligated to use this
feature. However we understand that this tool wouldn't be useful if you couldn't
customize it when you are ready for it.

## Learn More

You can learn more in the
[Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here:
[https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here:
[https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here:
[https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here:
[https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here:
[https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here:
[https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
  daisyui: { themes: ['light', 'dark'] },
};
